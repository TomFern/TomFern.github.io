{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/docker-perf-tips","result":{"data":{"markdownRemark":{"id":"22956f42-ff6a-5710-877b-176020ebee9e","html":"<p>Some options that might increase performance, some that don’t.</p>\n<h2 id=\"network\" style=\"position:relative;\"><a href=\"#network\" aria-label=\"network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Network</h2>\n<p>Containers get connected to a bridge network by default.\nA software bridge that allows communication between containers running on the same host &#x26; bridge.\nWe can also create and use custom bridges, to create isolated groups of containers.\nTo allow connections from outside, we must map the host’s ports to a container’s with <code class=\"language-text\">-p</code> (<em>publish</em> e.g. -p 3306:3306)\nThis is easy and flexible, but it makes Docker start an additional process (<em>docker-proxy</em>), which can use a non-trivial amount of CPU.</p>\n<p>What’s the alternative? Consider using <code class=\"language-text\">--net=host</code>, which connects the container network directly the host.\nIn my experience, a considerable boost can be gained, specially when there are multiple connections.</p>\n<p>The downside of this is that we run the risk of inadvertently exposing ports to the outside world.\nMoreover, changing service ports is, yet again, a hassle.\nWe’ll need to deal with configuration settings inside the container.</p>\n<p>How much more we can get out of Docker?\nI ran a <a href=\"./sysbench-guide-2\">sysbench</a> OLTP read+write test with 8 threads on MariaDB 10.3.12 to see.</p>\n<p><img src=\"/media/plots/docker-perf-tips/oltp_rw.png\" alt=\"Network Types\"></p>\n<p>In my test, host network means about a 37% TPS increase. I’ll let you decide if that is worth letting go of port mapping.</p>\n<h2 id=\"storage\" style=\"position:relative;\"><a href=\"#storage\" aria-label=\"storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storage</h2>\n<p>Containers are made up of several layers, the top one is the only one that can be written into.\nOnce a container is stopped and removed, this layer is lost.\nThe layers are managed by one of Docker’s storage drivers, which does copy-on-write.\nDocker’s documentation states that this feature reduces performance.</p>\n<p>To provide permanent storage we can use volumes and bind mounts.\nVolumes are managed by Docker itself, whereas bind mounts provide a way to map directory or file between the host and the container.\nIn theory, these methods should be more efficient because they bypass Docker’s storage driver.</p>\n<p>I was curious about a case in which I had to write lots of data but I didn’t need persistence.\nThe best solution would have been to a tmpfs mount, being memory storage, it’s the fastest.\nBut we don’t always have enough memory. What’s the best other alternative?</p>\n<p>I tested random write speed with <a href=\"http://freshmeat.sourceforge.net/projects/fio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fio</a> on an EC2 host with an io1 1000 IOPS volume.</p>\n<p><img src=\"/media/plots/docker-perf-tips/fio_write_3.png\" alt=\"Random write speeds\"></p>\n<p>As you can see, the mount option really makes no difference for write speeds.</p>\n<p>To put things into perspective I repeated the test with a tmpfs mount.\nI had to use a log scale to even see the slower options.</p>\n<p><img src=\"/media/plots/docker-perf-tips/fio_write_4_log.png\" alt=\"Random write speeds\"></p>\n<h2 id=\"use-limits\" style=\"position:relative;\"><a href=\"#use-limits\" aria-label=\"use limits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Limits</h2>\n<p>Containers, by default, don’t have any limits.\nAny of them can hoard all the host system’s resources.\nThis may be well and fine for development, but a potential disaster for production.</p>\n<p>Thus, a final recommendation: set limits for production containers. At the very least a memory limit.\nTo avoid swapping and containers getting killed by out of memory errors.\nWe can also set limits for CPU and disk I/O.</p>\n<p>First, we need to find out suitable limits. We can start the container normally and check resource usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker stats &lt;CONTAINER_ID&gt;\n\nCONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n529ea41caf55        jolly_borg          3.36%               5.016MiB / 983.9MiB   0.51%               0B / 0B             36.1MB / 24.4GB     7</code></pre></div>\n<p>A lot of details can be found under the <strong>/sys/fs/cgroup</strong> filesystem.\nFor example, we can get a great deal of interesting memory counters.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt; cat /sys/fs/cgroup/memory/docker/&lt;FULL_CONTAINER_ID&gt;/memory.stats\n\ncache 41623552\nrss 1097854976\nrss_huge 0\nshmem 15343616\nmapped_file 24809472\ndirty 0\nwriteback 0\nswap 122916864\npgpgin 91463838\npgpgout 91185552\npgfault 165685756\npgmajfault 3525\ninactive_anon 373063680\nactive_anon 738381824\ninactive_file 10625024\nactive_file 15716352\nunevictable 0\nhierarchical_memory_limit 9223372036854771712\nhierarchical_memsw_limit 9223372036854771712\ntotal_cache 41623552\ntotal_rss 1096085504\ntotal_rss_huge 0\ntotal_shmem 15343616\ntotal_mapped_file 24809472\ntotal_dirty 0\ntotal_writeback 0\ntotal_swap 122916864\ntotal_pgpgin 91463838\ntotal_pgpgout 91186010\ntotal_pgfault 165685756\ntotal_pgmajfault 3525\ntotal_inactive_anon 373063680\ntotal_active_anon 738381824\ntotal_inactive_file 10625024\ntotal_active_file 15716352\ntotal_unevictable 0</code></pre></div>\n<blockquote>\n<p>To get the full container id: <code class=\"language-text\">docker ps --no-trunc</code></p>\n</blockquote>\n<p>Once we have an estimation, we can try starting a new container with some limits.</p>\n<p>For a hard memory limit, we can use <code class=\"language-text\">--memory</code>.\nUse <code class=\"language-text\">--cpus</code> to limit the amount of CPUs available.</p>\n<blockquote>\n<p>When setting a memory limit, Docker will set a swap limit of <code class=\"language-text\">--memory</code> * 2. This can be changed with <code class=\"language-text\">--memory-swap</code>: <em>total swap allowed</em> = <code class=\"language-text\">--memory</code> - <code class=\"language-text\">--memory-swap</code>.</p>\n</blockquote>\n<p>Container limits can even be changed while they are running.\nWe don’t need to restart containers as\nDocker can change limits at runtime: <code class=\"language-text\">docker update</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># set limits, 4 CPUs, 4G of memory, 1G of swap\ndocker run -it --cpus=4 --memory=4G --memory-swap=5G ubuntu:latest bash\n# increase memory limits, 8G memory, 1G of swap\ndocker update --memory=8G --memory-swap=9G &lt;CONTAINER_ID&gt;</code></pre></div>\n<h2 id=\"related-links\" style=\"position:relative;\"><a href=\"#related-links\" aria-label=\"related links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related links</h2>\n<ul>\n<li>Benchmark data: <a href=\"https://github.com/TomFern/benchmark-data/tree/master/docker-perf-tips\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/TomFern/benchmark-data/tree/master/docker-perf-tips</a></li>\n<li><a href=\"https://docs.docker.com/network/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/network/</a></li>\n<li><a href=\"https://docs.docker.com/storage/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/storage/</a></li>\n<li><a href=\"https://docs.docker.com/config/containers/resource%5Fconstraints/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/config/containers/resource%5Fconstraints/</a></li>\n<li><a href=\"https://docs.docker.com/config/containers/runmetrics/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/config/containers/runmetrics/</a></li>\n</ul>\n<p>See you.</p>\n<p>Tomas</p>","fields":{"slug":"/posts/docker-perf-tips","tagSlugs":["/tag/docker/","/tag/mariadb/","/tag/linux/","/tag/benchmarks/"]},"frontmatter":{"date":"2019-02-02T11:21:00-03:00","description":"A few tips to make the most of a Docker.","tags":["docker","mariadb","linux","benchmarks"],"title":"Making the most out of Docker","socialImage":"/social/docker.jpg"}}},"pageContext":{"slug":"/posts/docker-perf-tips"}}}