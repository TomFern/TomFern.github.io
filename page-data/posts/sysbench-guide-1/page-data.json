{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sysbench-guide-1","result":{"data":{"markdownRemark":{"id":"2349afcf-3f4a-52dd-b315-250a911fb916","html":"<h2 id=\"why-when-how\" style=\"position:relative;\"><a href=\"#why-when-how\" aria-label=\"why when how permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why, When, How?</h2>\n<p>Benchmark shows the difference between should and does. Coupled with <a href=\"../tag/monitoring\">monitoring</a> it’s a great tool to identify bottlenecks.</p>\n<p>As to when: whenever we can, as long as the system is production. A good benchmark will stress the server so we don’t want users affected.\nRight after provisioning a server, during a maintenance window, before and after any major changes, these are all good opportunities to take advantage of a few precious\nminutes of calm to run some tests.</p>\n<p>We should try to mimic as best as possible the behaviour of the software we have.\nIs it single or multithreaded? Is it on more CPU bound or disk IO bound. Does it access data randomly or sequentially?\nDoes it manage data on fixed-size blocks?</p>\n<h2 id=\"introducing-sysbench\" style=\"position:relative;\"><a href=\"#introducing-sysbench\" aria-label=\"introducing sysbench permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introducing Sysbench</h2>\n<p>Sysbench is a popular benchmark tool that is available for linux, mac and can even run on windows (with it’s subsystem for linux).\nIt ships with tests for the OS and databases. It is extensible and scriptable, so writing our own tests is possible.</p>\n<p>If you are running linux, it’s most likely available in your distribution repository. Otherwise head to sysbench’s <a href=\"https://github.com/akopytov/sysbench\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> for instructions.</p>\n<h2 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<p>The general syntax is:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sysbench <span class=\"token operator\">&lt;</span>testname<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>action<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>test-specific options<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Sysbench has quite a few options, but help a few keystrokes away. To get to the general help:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sysbench --help</code></pre></div>\n<p>And for the specific test use:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sysbench <span class=\"token operator\">&lt;</span>testname<span class=\"token operator\">></span> <span class=\"token builtin class-name\">help</span></code></pre></div>\n<p>Some tests have a <em>prepare</em> and <em>cleanup</em> action, some also have an optional <em>warmup</em> action, others can be <em>run</em> directly.</p>\n<h2 id=\"the-test-loop\" style=\"position:relative;\"><a href=\"#the-test-loop\" aria-label=\"the test loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Test Loop</h2>\n<p>All tests have a common structure, the requested number of worker threads are created, each one will run its own test loop,\neach iteration of the loop is called an <em>event</em> and can have any number of operations. Sysbench keeps counters on all events across all threads.</p>\n<p>When it’s done, we get the statistics for all events. Under <em>latency</em> we can see the average event duration.\nThese values are common to all tests.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">...\nGeneral statistics:\n    total time:                          10.0014s\n    total number of events:              32479\n\nLatency (ms):\n         min:                                    1.11\n         avg:                                    2.46\n         max:                                   41.95\n         95th percentile:                       11.24\n         sum:                                79934.27\n\nThreads fairness:\n    events (avg/stddev):           4059.8750/59.44\n    execution time (avg/stddev):   9.9918/0.01</code></pre></div>\n<p>On multithreaded tests we want that events are distributed fairly among all threads, i.e. all threads should execute approximately the same number of events.\nThis is shown under <em>fairness</em>, the <em>stddev</em> (standard deviation) should be small in relation to the <em>average</em>.</p>\n<p>Most of the benchmarks will run for a specified time or until a certain condition is met. The default time limit is 10 seconds, but we can\nchange that using <code class=\"language-text\">--time</code>. Alternatively we can set a limit number of <code class=\"language-text\">--events</code>.</p>\n<h2 id=\"testing-your-cpus\" style=\"position:relative;\"><a href=\"#testing-your-cpus\" aria-label=\"testing your cpus permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Your CPUs</h2>\n<p>In this first test we’ll torture the CPUs by computing prime numbers.\nEach single event will check prime numbers up to the provided <code class=\"language-text\">--cpu-max-prime</code>.\nThe higher this value is, the longer it takes an event to end.</p>\n<p>I usually like to start with single threadetest. I try to find a <code class=\"language-text\">--cpu-max-prime</code> that will take at least a few seconds to complete.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># sysbench cpu test, single event\n-&gt; sysbench cpu run --threads=1 --events=1 --cpu-max-prime=8000000\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nPrime numbers limit: 8000000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:     0.09\n\nGeneral statistics:\n    total time:                          11.2315s\n    total number of events:              1\n\nLatency (ms):\n         min:                                11231.45\n         avg:                                11231.45\n         max:                                11231.45\n         95th percentile:                    11317.84\n         sum:                                11231.45\n\nThreads fairness:\n    events (avg/stddev):           1.0000/0.00\n    execution time (avg/stddev):   11.2314/0.00</code></pre></div>\n<p>With a suitable max prime number found, the next step is to run a longer test.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># sysbench cpu, single thread\n-&gt; sysbench cpu run --threads=1 --time=60 --cpu-max-prime=8000000\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nPrime numbers limit: 8000000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:     0.09\n\nGeneral statistics:\n    total time:                          67.5691s\n    total number of events:              6\n\nLatency (ms):\n         min:                                11217.78\n         avg:                                11261.48\n         max:                                11302.15\n         95th percentile:                    11317.84\n         sum:                                67568.87\n\nThreads fairness:\n    events (avg/stddev):           6.0000/0.00\n    execution time (avg/stddev):   67.5689/0.00</code></pre></div>\n<p>On <em>average</em>, it took 11.261 seconds to calculate primes up to our limit.\nA lower average is better, since it means the CPU takes less time to reach the same point. For the same reason, a higher value in <em>events per second</em> is better.</p>\n<p>If we are going to run multithreaded applications we need to run another test with an appropiate number <code class=\"language-text\">--threads</code>.\nFor example in a system with 4 cores with hyperthreading this is a good starting point.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># cpu test, 8 threads\n-&gt; sysbench cpu run --threads=8 --time=60 --cpu-max-prime=8000000\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 8\nInitializing random number generator from current time\n\n\nPrime numbers limit: 8000000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:     0.29\n\nGeneral statistics:\n    total time:                          82.1154s\n    total number of events:              24\n\nLatency (ms):\n         min:                                26514.20\n         avg:                                27212.58\n         max:                                28103.35\n         95th percentile:                    27846.48\n         sum:                               653101.88\n\nThreads fairness:\n    events (avg/stddev):           3.0000/0.00\n    execution time (avg/stddev):   81.6377/0.36</code></pre></div>\n<h2 id=\"testing-your-memory\" style=\"position:relative;\"><a href=\"#testing-your-memory\" aria-label=\"testing your memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Your Memory</h2>\n<p>For memory we can test either <em>write</em> or <em>read</em> speeds, the mode is selected with <code class=\"language-text\">--memory-open</code>.\nWe can choose between sequential (<em>seq</em>) and random (<em>rnd</em>) access modes with <code class=\"language-text\">--memory-access-mode</code>.</p>\n<p>This benchmark has a special stop condition: <code class=\"language-text\">--memory-total-size</code>. Bear in mind, this isn’t the total size allocated in RAM.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># memory, no time limit, stop on 100GB written\n-&gt; sysbench memory run --memory-total-size=100G --memory-open=write --memory-access-mode=rnd --time=0\nWARNING: Both event and time limits are disabled, running an endless test\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nRunning memory speed test with the following options:\n  block size: 1KiB\n  total size: 102400MiB\n  operation: write\n  scope: global\n\nInitializing worker threads...\n\nThreads started!\n\nTotal operations: 104857600 (5010197.95 per second)\n\n102400.00 MiB transferred (4892.77 MiB/sec)\n\n\nGeneral statistics:\n    total time:                          20.9272s\n    total number of events:              104857600\n\nLatency (ms):\n         min:                                    0.00\n         avg:                                    0.00\n         max:                                    0.38\n         95th percentile:                        0.00\n         sum:                                10816.80\n\nThreads fairness:\n    events (avg/stddev):           104857600.0000/0.00\n    execution time (avg/stddev):   10.8168/0.00</code></pre></div>\n<p>The latency is measured in milliseconds, it’s just to big of a unit for memory speeds so it’s not very useful here.\nBut we can think of the <em>MiB per seconds</em> as the average speed.</p>\n<p>If we have a service that work with fixed-size blocks, for example if plan to have a database,\nwe should set <code class=\"language-text\">--memory-block-size</code> to match it.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># some memory tests for MySQL (page size is 16K)\nsysbench memory run --threads=8 --memory-block-size=16K --memory-total-size=100G --memory-oper=write\nsysbench memory run --threads=8 --memory-block-size=16K --memory-total-size=100G --memory-oper=read</code></pre></div>\n<h2 id=\"testing-your-disk-io-speed\" style=\"position:relative;\"><a href=\"#testing-your-disk-io-speed\" aria-label=\"testing your disk io speed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Your Disk I/O Speed</h2>\n<p>Before starting, we need to <em>prepare</em> a file or set of files to work on. We set the <strong>total</strong> space to allocate with <code class=\"language-text\">--file-total-size</code> (which must be at least 2GB)\nand how many files there will be in the set, the space will be split into even sized files.</p>\n<p>We probably want to avoid caching the files in memory because we wouldn’t be measuring the true disk spee,\nso it might me a good idea to include <code class=\"language-text\">--file-extra-flags=direct</code> to bypass it.</p>\n<p>It’s generally recommended, whenever possible, that allocated space is larger than the installed RAM, just in case caching is taking place in spite of our best efforts.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench fileio prepare --file-num=10 --file-total-size=10G --file-extra-flags=direct\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\n10 files, 1048576Kb each, 10240Mb total\nCreating files for the test...\nExtra file open flags: (none)\nCreating file test_file.0\nCreating file test_file.1\nCreating file test_file.2\nCreating file test_file.3\nCreating file test_file.4\nCreating file test_file.5\nCreating file test_file.6\nCreating file test_file.7\nCreating file test_file.8\nCreating file test_file.9\n10737418240 bytes written in 45.15 seconds (226.78 MiB/sec).</code></pre></div>\n<blockquote>\n<p><em>prepare</em> can reutilize previous test files, but it only can <strong>grow</strong> them, so we can only reuse test files if they are bigger or equal than before. Otherwise we must <em>cleanup</em> and <em>prepare</em> again.</p>\n</blockquote>\n<p>Now we need to choose a <code class=\"language-text\">--file-test-mode</code>:</p>\n<ul>\n<li>seqwr: sequential write</li>\n<li>seqrewr: sequential read+write</li>\n<li>seqrd: sequential read</li>\n<li>rndrd: random read</li>\n<li>rndwr: random write</li>\n<li>rndrw: random read write</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># file read-write test\n-&gt; sysbench fileio run --file-num=10 --file-total-size=10G --file-test-mode=rndrw --file-extra-flags=direct --time=60\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nExtra file open flags: directio\n10 files, 1GiB each\n10GiB total file size\nBlock size 16KiB\nNumber of IO requests: 0\nRead/Write ratio for combined random IO test: 1.50\nPeriodic FSYNC enabled, calling fsync() each 100 requests.\nCalling fsync() at the end of test, Enabled.\nUsing synchronous I/O mode\nDoing random r/w test\nInitializing worker threads...\n\nThreads started!\n\n\nFile operations:\n    reads/s:                      2388.59\n    writes/s:                     1592.38\n    fsyncs/s:                     398.14\n\nThroughput:\n    read, MiB/s:                  37.32\n    written, MiB/s:               24.88\n\nGeneral statistics:\n    total time:                          60.0027s\n    total number of events:              262756\n\nLatency (ms):\n         min:                                    0.06\n         avg:                                    0.23\n         max:                                   77.63\n         95th percentile:                        0.39\n         sum:                                59796.75\n\nThreads fairness:\n    events (avg/stddev):           262756.0000/0.00\n    execution time (avg/stddev):   59.7967/0.00</code></pre></div>\n<p>As always, it’s a good idea to try to match as best as possible the disk IO activity for our application. We have some flexibility here\nwith additional options:</p>\n<ul>\n<li><code class=\"language-text\">--file-num</code> number of files [128]</li>\n<li><code class=\"language-text\">--file-block-size</code> block size [16384]</li>\n<li><code class=\"language-text\">--file-total-size</code> total size  [2G]</li>\n<li><code class=\"language-text\">--file-test-mode</code> test mode: seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw</li>\n<li><code class=\"language-text\">--file-io-mode</code> file operations mode: sync,async,mmap [sync]</li>\n<li><code class=\"language-text\">--file-async-backlog</code> number of asynchronous requests per thread [128]</li>\n<li><code class=\"language-text\">--file-extra-flags</code> list of additional flags to use to open files: sync,dsync,direct</li>\n<li><code class=\"language-text\">--file-fsync-freq</code> fsync() every N requests [100]</li>\n<li><code class=\"language-text\">--file-fsync-all</code> fsync() after each write [off]</li>\n<li><code class=\"language-text\">--file-fsync-end</code> fsync() at the end of test [on]</li>\n<li><code class=\"language-text\">--file-fsync-mode</code> method for sync: fsync, fdatasync [fsync]</li>\n<li><code class=\"language-text\">--file-merged-requests</code> max I/O request to merge [0]</li>\n<li><code class=\"language-text\">--file-rw-ratio</code> reads/writes ratio for combined test [1.5]</li>\n</ul>\n<p>As an example, for a system destined to run a MySQL server we could try something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># a test simulating MySQL file activity\nsysbench fileio run --threads=8 --file-extra-flags=direct --file-test-mode=rndrw --file-num=10 --file-block-size=1M --file-block-size=16K</code></pre></div>\n<p>After running our tests, we need only to remove the work files with <em>cleanup</em></p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench fileio cleanup --file-num=10\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRemoving test files...</code></pre></div>\n<h2 id=\"testing-mutexes\" style=\"position:relative;\"><a href=\"#testing-mutexes\" aria-label=\"testing mutexes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Mutexes</h2>\n<p>This benchmark is intended to test the speed for mutex locks (mutex stands for “mutual exclusion”).\nWhich play an important role in multithreading. It simulates high concurrency, with threads acquiring and releasing locks all the time.</p>\n<p>Sysbench creates an initial pool of <code class=\"language-text\">--mutex-num</code> mutexes, then it starts the threads, which iterate over an empty loop, every <code class=\"language-text\">--mutex-loops</code> the thread will\ngrab one random mutex from the pool, modify a global variable, and release it. Each event will acquire and release the mutexes until the <code class=\"language-text\">--mutex-locks</code> value is reached.</p>\n<p>Here <code class=\"language-text\">--time</code> or <code class=\"language-text\">--events</code> are completely ignored. Sysbench always runs one event per thread.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench mutex run --threads=10\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 10\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\n\nGeneral statistics:\n    total time:                          0.8845s\n    total number of events:              10\n\nLatency (ms):\n         min:                                  802.84\n         avg:                                  855.55\n         max:                                  873.81\n         95th percentile:                      877.61\n         sum:                                 8555.51\n\nThreads fairness:\n    events (avg/stddev):           1.0000/0.00\n    execution time (avg/stddev):   0.8556/0.02</code></pre></div>\n<h2 id=\"testing-threads\" style=\"position:relative;\"><a href=\"#testing-threads\" aria-label=\"testing threads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Threads</h2>\n<p>Here we have a test for the CPU scheduler. It can simulate high concurrency conditions, where multiple threads\ncompete for mutexes.</p>\n<p>Each thread will take <code class=\"language-text\">--thread-locks</code> mutexes and yield the CPU. This causes the thread to stop running and is placed on the run queue by the scheduler.\nOnce the thread is again scheduled to run, the mutexes are released.</p>\n<p>A single event will perform these actions <code class=\"language-text\">--thread-yields</code> times, so the higher this number, the higher the concurrency placed on each mutex,\nand the lower the number of events per second.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench threads run --threads=4 --thread-yields=1000 --thread-locks=10\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 4\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\n\nGeneral statistics:\n    total time:                          10.0005s\n    total number of events:              50754\n\nLatency (ms):\n         min:                                    0.50\n         avg:                                    0.79\n         max:                                   14.37\n         95th percentile:                        0.81\n         sum:                                39980.48\n\nThreads fairness:\n    events (avg/stddev):           12688.5000/54.38\n    execution time (avg/stddev):   9.9951/0.00</code></pre></div>\n<h2 id=\"related-links\" style=\"position:relative;\"><a href=\"#related-links\" aria-label=\"related links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Links</h2>\n<ul>\n<li>sysbench’s github: <a href=\"https://github.com/akopytov/sysbench\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/akopytov/sysbench</a></li>\n</ul>\n<h2 id=\"whats-next\" style=\"position:relative;\"><a href=\"#whats-next\" aria-label=\"whats next permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s Next?</h2>\n<p>Whew, that was a longer post than I intended and to think I only covered a part of it all.</p>\n<p>There is still more to say about sysbench, check the <a href=\"./sysbench-guide-2\">second part</a> where I deal with databases, so the fun is just starting.</p>\n<p>So long.</p>\n<p>Tomas</p>","fields":{"slug":"/posts/sysbench-guide-1","tagSlugs":["/tag/linux/","/tag/unix/","/tag/guides/"]},"frontmatter":{"date":"2019-01-09T00:05:00-03:00","description":"A getting started guide to benchmarking with sysbench","tags":["linux","unix","guides"],"title":"Benchmarking with sysbench","socialImage":"/social/database.jpg"}}},"pageContext":{"slug":"/posts/sysbench-guide-1"}}}