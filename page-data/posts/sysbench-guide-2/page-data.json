{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sysbench-guide-2","result":{"data":{"markdownRemark":{"id":"8e7bb496-903d-5cfc-8f5f-acc74655fb30","html":"<p>This is my second part of the sysbench guide, I’ll cover here some basic benchmarks for databases. Feel free to check my <a href=\"./sysbench-guide-1\">first part</a> for an introduction.</p>\n<h2 id=\"connecting-to-the-db\" style=\"position:relative;\"><a href=\"#connecting-to-the-db\" aria-label=\"connecting to the db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to the DB</h2>\n<p>First things first, we’ll need a test database. We’ll stick to the default “sbtest”, so go ahead and create it. I’ll wait.</p>\n<p>Now sysbench needs the connection parameters. The actual values depend on the target. Sysbench supports MySQL and postgreSQL.</p>\n<p>For MySQL, MariaDB or Percona Server the command line options are:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--db-driver=mysql\n--mysql-host=\n--mysql-port=\n--mysql-user=\n--mysql-password=</code></pre></div>\n<p>For postgreSQL, we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--db-driver=pgsql\n--pgsql-host=\n--pgsql-port=\n--pgsql-user=\n--pgsql-password=</code></pre></div>\n<p>For brevity’s sake, I will be <em>omitting these parameters</em> in the examples below, but they are required so don’t you forget them.</p>\n<h2 id=\"the-test-table\" style=\"position:relative;\"><a href=\"#the-test-table\" aria-label=\"the test table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Test Table</h2>\n<p>Here we have the prototypical test table</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>sbtest1<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>k<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>c<span class=\"token punctuation\">`</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>pad<span class=\"token punctuation\">`</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>k_1<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>k<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8mb4_unicode_ci</code></pre></div>\n<p>That’s it. 4 columns: 2 integer and 2 chars. Unfortunately we don’t have so many built-in options to tweak the table as in other tools such as <a href=\"./mysqlslap-guide-1\">mysqlslap</a>\nHowever, some control is possible.</p>\n<ul>\n<li><code class=\"language-text\">--auto_inc</code> sets the id column as autoincrement/serial [on]</li>\n<li><code class=\"language-text\">--create_secondary</code> creates a secondary index on column k [on]</li>\n<li><code class=\"language-text\">--mysql_storage_engine</code> storage engine, only applies to MySQL [innodb]</li>\n</ul>\n<p>The <code class=\"language-text\">id</code> column is populated either by the DB (with autoincrement/serial), or by sequential integers generated by sysbench,\n<code class=\"language-text\">k</code> is assigned a random number between 1 and whatever the table size is. The char columns are filled with random numbers,\nin groups of 11 digits separated by dashes, no index is created for either <code class=\"language-text\">c</code> or <code class=\"language-text\">pad</code>.</p>\n<h2 id=\"bulk-insert\" style=\"position:relative;\"><a href=\"#bulk-insert\" aria-label=\"bulk insert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bulk Insert</h2>\n<p>Bulk insert does concurrent multi-row inserts, we specify how many threads we want and each one inserts into its own table.\nSo the total number of tables is the same as the number of threads.</p>\n<p>The default is 1 thread. But that is easily changed. Let’s create 20 tables.</p>\n<p>(remember that the db connection parameters <em>are omitted</em>)</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sysbench bulk_insert prepare --threads=20</code></pre></div>\n<p>Now lets insert 1 million rows and see how long it takes. The rows distributed  over all the tables.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># Insert 1M rows total, concurrently on the 20 tables\n-&gt; sysbench bulk_insert run --threads=20 --events=1000000 --time=0\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 20\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\nSQL statistics:\n    queries performed:\n        read:                            0\n        write:                           43\n        other:                           0\n        total:                           43\n    transactions:                        1000000 (144368.49 per sec.)\n    queries:                             43     (6.21 per sec.)\n    ignored errors:                      0      (0.00 per sec.)\n    reconnects:                          0      (0.00 per sec.)\n\nGeneral statistics:\n    total time:                          6.9213s\n    total number of events:              1000000\n\nLatency (ms):\n         min:                                    0.00\n         avg:                                    0.07\n         max:                                 2932.57\n         95th percentile:                        0.00\n         sum:                                67550.48\n\nThreads fairness:\n    events (avg/stddev):           50000.0000/13956.14\n    execution time (avg/stddev):   3.3775/0.26</code></pre></div>\n<p>We can see that 1M rows were added using a total of 43 INSERTs statements (an average of 23255.8 rows per INSERT). The total time was about 6.92 seconds.</p>\n<p>The <em>latency</em> statistics are interesting here, the <em>average</em> time to insert a set of rows was 0.07 milliseconds, but max was way higher, about 2.9 seconds.\nThis is because the inserted rows are unevenly inserted among the tables, we can see this by comparing the fairness <em>stdev</em> vs the <em>avg</em>.</p>\n<p>After we are satisfied we can drop the tables, and be ready for the next test.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sysbench bulk_insert cleanup --threads=20</code></pre></div>\n<h2 id=\"oltp-read-only\" style=\"position:relative;\"><a href=\"#oltp-read-only\" aria-label=\"oltp read only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OLTP Read-Only</h2>\n<p>OLTP (Online Transaction Processing) tests try simulate transaction-oriented loads in the database, sysbench does this by running several kinds of queries inside a transaction.</p>\n<p>Lets start simple. We want to create 10 tables, each with 10K rows. For a total of 100K rows.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># Prepare 10 tables, each with 10K rows\nsysbench oltp_read_only prepare --tables=10 --table_size=100000</code></pre></div>\n<p>It’s usually a good idea to <code class=\"language-text\">prewarm</code> the database, i.e. load the tables into the buffer pool. So we can more accurately simulate the steady-state performance.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sysbench oltp_read_only prewarm --tables=10 --threads=10</code></pre></div>\n<p>Run the benchmark with 10K events, with a ratio of 2 threads per table</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench oltp_read_only run --tables=10 --threads=20 --events=10000 --time=0\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 20\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\nSQL statistics:\n    queries performed:\n        read:                            140000\n        write:                           0\n        other:                           20000\n        total:                           160000\n    transactions:                        10000  (1077.22 per sec.)\n    queries:                             160000 (17235.59 per sec.)\n    ignored errors:                      0      (0.00 per sec.)\n    reconnects:                          0      (0.00 per sec.)\n\nGeneral statistics:\n    total time:                          9.2813s\n    total number of events:              10000\n\nLatency (ms):\n         min:                                    4.37\n         avg:                                   18.54\n         max:                                   69.91\n         95th percentile:                       29.19\n         sum:                               185396.12\n\nThreads fairness:\n    events (avg/stddev):           500.0000/4.46\n    execution time (avg/stddev):   9.2698/0.01</code></pre></div>\n<p>So, this is interesting: Why did we get 140K reads when we asked for 10K events?</p>\n<p>Sysbench by default runs the following statements per event:</p>\n<ul>\n<li>10 x point selects: <code class=\"language-text\">select c from table where id=i</code></li>\n<li>1 x simple range: <code class=\"language-text\">select c from table where id between a and b</code></li>\n<li>1 x sum range: <code class=\"language-text\">select sum(k) from table where id between a and b</code></li>\n<li>1 x order range: <code class=\"language-text\">select c from table where id between a and b order by c</code></li>\n<li>1 x distinct range: <code class=\"language-text\">select distinct c from table where id between a and b order by c</code></li>\n</ul>\n<p>When done, delete the tables.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sysbench oltp_read_only cleanup --tables=20</code></pre></div>\n<p>Wasn’t that fun?</p>\n<h2 id=\"oltp-write-only\" style=\"position:relative;\"><a href=\"#oltp-write-only\" aria-label=\"oltp write only permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OLTP Write Only</h2>\n<p>This is the write counterpart of the previous test. By now, you know the drill, right?</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sysbench oltp_write_only prepare --tables=10\nsysbench oltp_write_only prewarm --tables=10 --threads=10</code></pre></div>\n<p>Lets use a time limit instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; sysbench oltp_write_only run --tables=10 --threads=20 --events=0 --time=30\n\nsysbench 1.0.15 (using system LuaJIT 2.0.5)\n\nRunning the test with following options:\nNumber of threads: 20\nInitializing random number generator from current time\n\n\nInitializing worker threads...\n\nThreads started!\n\nSQL statistics:\n    queries performed:\n        read:                            0\n        write:                           341181\n        other:                           170918\n        total:                           512099\n    transactions:                        85123  (2836.18 per sec.)\n    queries:                             512099 (17062.42 per sec.)\n    ignored errors:                      672    (22.39 per sec.)\n    reconnects:                          0      (0.00 per sec.)\n\nGeneral statistics:\n    total time:                          30.0117s\n    total number of events:              85123\n\nLatency (ms):\n         min:                                    0.53\n         avg:                                    7.05\n         max:                                   67.17\n         95th percentile:                       14.21\n         sum:                               599892.48\n\nThreads fairness:\n    events (avg/stddev):           4256.1500/49.08\n    execution time (avg/stddev):   29.9946/0.00</code></pre></div>\n<p>Each write_only event consists of:</p>\n<ul>\n<li>1 x index_updates: <code class=\"language-text\">update table set k~k+1 where id=i</code></li>\n<li>1 x non_index_updates: <code class=\"language-text\">update table set c=? where id=i</code></li>\n<li>1 x delete_inserts: <code class=\"language-text\">delete from table where id~i; insert into table (id, k, c, pad) values (...)</code></li>\n</ul>\n<p>When using a time stop condition, we’ll want to compare rates, such as <em>queries per second</em> or <em>transactions per second</em></p>\n<h2 id=\"oltp-read-write\" style=\"position:relative;\"><a href=\"#oltp-read-write\" aria-label=\"oltp read write permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OLTP Read Write</h2>\n<p>This test combines the last two in one package. First it runs the same code as in oltp_read_only and then continues with oltp_write_only.\nWe can even reuse the table from the previous benchmark.</p>\n<p>The transaction content for tests can be tweaked.</p>\n<ul>\n<li><code class=\"language-text\">--range_selects</code> Enable/disable all range SELECT queries [on]</li>\n<li><code class=\"language-text\">--range_size</code> Range size for range SELECT queries [100]</li>\n<li><code class=\"language-text\">--simple_ranges</code> Simple range SELECT queries per transaction [1]</li>\n<li><code class=\"language-text\">--point_selects</code> Point SELECT queries per transaction [10]</li>\n<li><code class=\"language-text\">--order_ranges</code> SELECT ORDER BY queries per transaction [1]</li>\n<li><code class=\"language-text\">--distinct_ranges</code> SELECT DISTINCT queries per transaction [1]</li>\n<li><code class=\"language-text\">--delete_inserts</code> DELETE/INSERT combinations per transaction [1]</li>\n<li><code class=\"language-text\">--index_updates</code> UPDATE index queries per transaction [1]</li>\n<li><code class=\"language-text\">--non_index_updates</code> UPDATE non-index queries per transaction [1]</li>\n<li><code class=\"language-text\">--sum_ranges</code>  SELECT SUM() queries per transaction [1]</li>\n<li><code class=\"language-text\">--skip_trx</code> Don’t start explicit transactions (use AUTOCOMMIT) [off]</li>\n</ul>\n<h2 id=\"related-links\" style=\"position:relative;\"><a href=\"#related-links\" aria-label=\"related links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Links</h2>\n<ul>\n<li>sysbench’s github: <a href=\"https://github.com/akopytov/sysbench\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/akopytov/sysbench</a></li>\n</ul>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>These aren’t the only DB tests that ship with sysbench, but the basic procedure is basically the same.</p>\n<p>Until next time.</p>\n<p>Tomas</p>","fields":{"slug":"/posts/sysbench-guide-2","tagSlugs":["/tag/mysql/","/tag/pgsql/","/tag/guides/"]},"frontmatter":{"date":"2019-01-09T00:13:00-03:00","description":"Testing database with sysbench","tags":["mysql","pgsql","guides"],"title":"Sysbench for databases","socialImage":"/social/database.jpg"}}},"pageContext":{"slug":"/posts/sysbench-guide-2"}}}