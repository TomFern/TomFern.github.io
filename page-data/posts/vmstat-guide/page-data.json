{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/vmstat-guide","result":{"data":{"markdownRemark":{"id":"7884c040-ff2a-5dbb-8b78-7a38d0542719","html":"<p>A getting started guide for vmstat, iostat, mpstat and pidstat.</p>\n<h2 id=\"vmstat\" style=\"position:relative;\"><a href=\"#vmstat\" aria-label=\"vmstat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vmstat</h2>\n<p>Once I figured out how vmstat works, I found that I almost could no longer live without it, it’s that good.\nFortunately it’s available everywhere, so I don’t. There are many versions around, both for\nLinux and Unix.</p>\n<p>vmstat does a little bit of everything: memory, processes, I/O, swap, disks, CPU.</p>\n<p>The basic syntax is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vmstat [options] &lt;interval&gt; &lt;count&gt;</code></pre></div>\n<p>vmstat prints a new update every <em>interval</em> seconds, stopping after <em>count</em> lines.\nIf no count is supplied, vmstat continues until killed. If there isn’t any <em>interval</em>, only 1 line is printed.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># 1 update per second, 5 updates\n-&gt; vmstat 1 5\nprocs   -----------memory----------   --swap-    ---io--- -system-- ------cpu-----\n r  b   swpd    free   buff  cache    si   so    bi    bo   in   cs us sy id wa st\n 4  0      0 4098084 375068 3462944    0    0    34    25  340  320  8  3 89  0  0\n 1  0      0 4098184 375068 3463264    0    0     0     0 1263 3198  4  3 93  0  0\n 0  0      0 4098436 375068 3462924    0    0     0     0 1141 2999  3  2 95  0  0\n 0  0      0 4097736 375076 3462916    0    0     0     0 2166 4414  5  4 92  0  0\n 0  0      0 4096476 375076 3462916    0    0     0     0 1103 3130  3  3 94  0  0</code></pre></div>\n<p>The values in the very first line are averages since boot, thus it usually stands out as different than the rest.</p>\n<p>All values, with the exception of memory and processes, are average <em>rates</em> from the previous update.\nMemory and processes (the first 6 columns) are always instantaneous values.\nMemory is shown in KBs but <code class=\"language-text\">-S</code> changes units, e.g. <code class=\"language-text\">-S M</code> for MBs.</p>\n<p>If your version of vmstat supports <code class=\"language-text\">-w</code>, use it,  makes the table wider and easier to read.</p>\n<p>So what does each column mean?</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>meaning</th>\n<th>unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>number of processes running</td>\n<td>-</td>\n</tr>\n<tr>\n<td>b</td>\n<td>number of processes sleeping</td>\n<td>-</td>\n</tr>\n<tr>\n<td>spwd</td>\n<td>swap memory used</td>\n<td>K</td>\n</tr>\n<tr>\n<td>free</td>\n<td>amount of idle memory</td>\n<td>K</td>\n</tr>\n<tr>\n<td>buff</td>\n<td>memory used for buffers</td>\n<td>K</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>memory used for cache</td>\n<td>K</td>\n</tr>\n<tr>\n<td>si</td>\n<td>swaps per second from disk to memory</td>\n<td>1/s</td>\n</tr>\n<tr>\n<td>so</td>\n<td>swaps per second from memory to disk</td>\n<td>1/s</td>\n</tr>\n<tr>\n<td>bi</td>\n<td>blocks per second received from block device</td>\n<td>blocks/s</td>\n</tr>\n<tr>\n<td>bo</td>\n<td>blocks per second sent to block device</td>\n<td>blocks/s</td>\n</tr>\n<tr>\n<td>in</td>\n<td>interrupts per second</td>\n<td>1/s</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>context switches per second</td>\n<td>1/s</td>\n</tr>\n<tr>\n<td>us</td>\n<td>CPU user time</td>\n<td>% of total</td>\n</tr>\n<tr>\n<td>sy</td>\n<td>CPU system time</td>\n<td>% of total</td>\n</tr>\n<tr>\n<td>id</td>\n<td>CPU idle time</td>\n<td>% of total</td>\n</tr>\n<tr>\n<td>st</td>\n<td>CPU time stolen from Virtual Machine</td>\n<td>% of total</td>\n</tr>\n</tbody>\n</table>\n<p>A few guidelines to read the values:</p>\n<ul>\n<li>check first <em>si</em> and <em>so</em> for swapping activity, this is <em>the</em> performance killer</li>\n<li>check that memory allocation makes sense for the workload</li>\n<li>consistent high <em>us</em> indicate possible CPU bound load</li>\n<li>consistent high <em>wa</em> indicate possible I/O bound load</li>\n<li>if this is a VM and <em>st</em> (steal) is consistently high for long, the host system could be overloaded or the VM under-provisioned</li>\n</ul>\n<p><code class=\"language-text\">-d</code> gets us per-device I/O counters since boot. With <code class=\"language-text\">-p &lt;PART&gt;</code> we get the same for an specific parition.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt; vmstat -d 1\ndisk- ------------reads------------ ------------writes----------- -----IO------\n       total merged sectors      ms  total merged sectors      ms    cur    sec\nsda   154968   4762 5471678   52614 123981  67290 4139296   68873      0     45\nsda   154968   4762 5471678   52614 123985  67305 4139440   68876      0     45\nsda   187412   5295 5735630   57902 126252  67704 5888256   80177      0     51\n...</code></pre></div>\n<p>Columns are read like this:</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>total</td>\n<td>total number of reads / writes</td>\n</tr>\n<tr>\n<td>merged</td>\n<td>merged requests (N requests into one I/O)</td>\n</tr>\n<tr>\n<td>sectors</td>\n<td>number of sectors read / written</td>\n</tr>\n<tr>\n<td>ms</td>\n<td>milliseconds spent reading / writing</td>\n</tr>\n<tr>\n<td>cur</td>\n<td>number of I/O operations running</td>\n</tr>\n<tr>\n<td>s</td>\n<td>seconds spent for I/O</td>\n</tr>\n</tbody>\n</table>\n<p>We can also access a detailed cache utilization report with <code class=\"language-text\">-m</code>, but it may require root permissions to work.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">&gt; vmstat -m\nCache                            Num  Total   Size  Pages\necryptfs_inode_cache            1544   1564    960     17\necryptfs_file_cache              256   1024     16    256\necryptfs_auth_tok_list_item       19     76    832     19\nnf_conntrack_expect                0      0    216     18\nnf_conntrack                     101    200    320     25\nfuse_request                      80     80    400     20\nfuse_inode                        42     76    832     19\next4_groupinfo_4k               1716   1736    144     28\next4_inode_cache              325004 327150   1080     30\next4_allocation_context          128    128    128     32\next4_io_end                      256    320     64     64\next4_extent_status            156920 156978     40    102\nmbcache                          294    438     56     73\n...</code></pre></div>\n<p>And the columns are:</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cache</td>\n<td>the cache name</td>\n</tr>\n<tr>\n<td>num</td>\n<td>active object count</td>\n</tr>\n<tr>\n<td>total</td>\n<td>total object count</td>\n</tr>\n<tr>\n<td>size</td>\n<td>size per object</td>\n</tr>\n<tr>\n<td>pages</td>\n<td>pages with one or more active object</td>\n</tr>\n</tbody>\n</table>\n<p>vmstat also has these one-shot views:</p>\n<ul>\n<li><code class=\"language-text\">-s</code> system statistics</li>\n<li><code class=\"language-text\">-D</code> all disks summary</li>\n<li><code class=\"language-text\">-f</code> forks</li>\n</ul>\n<h2 id=\"iostat\" style=\"position:relative;\"><a href=\"#iostat\" aria-label=\"iostat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iostat</h2>\n<p>iostat shows the combined CPU and disk I/O statistics. As with vmstat, it can work with <em>interval</em> and <em>count</em></p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># one update per second\n-&gt; iostat 1\nLinux 4.19.8-arch1-1-ARCH (ix) \t12/24/2018 \t_x86_64_\t(4 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          12.14    0.03    5.66    0.03    0.00   82.14\n\nDevice             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nsda               4.41        29.11        49.44    3409859    5790640\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           5.56    0.00    3.79    0.00    0.00   90.66\n\nDevice             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nsda               0.00         0.00         0.00          0          0\n...</code></pre></div>\n<p>Again, the first report shows averages since boot (we can omit it with <code class=\"language-text\">-y</code>). While the following shows rates since the previous interval.</p>\n<p>We can choose to only see cpu with <code class=\"language-text\">-c</code> or disk with <code class=\"language-text\">-d</code>. Also <code class=\"language-text\">-x</code> shows extended I/O statistics and <code class=\"language-text\">-m</code> changes units to MB.\n<code class=\"language-text\">-h</code> changes into an easier to read (for humans) format.</p>\n<h2 id=\"mpstat\" style=\"position:relative;\"><a href=\"#mpstat\" aria-label=\"mpstat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mpstat</h2>\n<p>mpstat shows (more) detailed CPU statistics. We get vmstat’s counters plus some. Same deal with the\n<em>interval</em> and <em>count</em></p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># 1 update per second\n-&gt; mpstat 1\nLinux 4.19.8-arch1-1-ARCH (ix) \t12/24/2018 \t_x86_64_\t(4 CPU)\n\n06:48:41 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n06:48:42 PM  all    7.85    0.00    3.04    0.00    0.25    0.51    0.00    0.00    0.00   88.35\n06:48:43 PM  all   10.08    0.00    4.79    0.00    1.01    0.00    0.00    0.00    0.00   84.13\n06:48:44 PM  all    7.25    0.00    5.25    0.00    0.75    0.50    0.00    0.00    0.00   86.25\n06:48:45 PM  all    9.07    0.00    3.78    0.25    1.01    0.50    0.00    0.00    0.00   85.39</code></pre></div>\n<p>First line is, yet again, averages since boot.</p>\n<p>We can choose to only show activity for some CPUs with <code class=\"language-text\">-P</code>, e.g. <code class=\"language-text\">-P 1,3</code></p>\n<p>There are additional views: <code class=\"language-text\">-I ALL</code> shows all CPU interruptions, <code class=\"language-text\">-n</code> shows CPU statistics based on NUMA placement nodes\n(use <code class=\"language-text\">-N</code> to indicate which nodes to report). There is even a JSON output with <code class=\"language-text\">-o JSON</code></p>\n<p>mpstat shows general CPU utilization, to track an individual process there is <em>pidstat</em></p>\n<h2 id=\"pidstat\" style=\"position:relative;\"><a href=\"#pidstat\" aria-label=\"pidstat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pidstat</h2>\n<p>This one has some similarities with <em>top</em>. Every <em>interval</em> pidstat prints what processes were running.\nWe can also track particular processes with <code class=\"language-text\">-p</code>. Threads are shown with <code class=\"language-text\">-t</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># track process CPU activity, thread view\n-&gt; pidstat -t -p 25809 1\nLinux 4.19.8-arch1-1-ARCH (ix) \t12/29/2018 \t_x86_64_\t(4 CPU)\n\n11:00:58 PM   UID      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command\n11:00:58 PM   980     25809         -    0.22    0.07    0.00    0.00    0.28     1  mysqld\n11:00:58 PM   980         -     25809    0.00    0.00    0.00    0.00    0.00     1  |__mysqld\n11:00:58 PM   980         -     25811    0.00    0.00    0.00    0.00    0.00     0  |__mysqld\n11:00:58 PM   980         -     25812    0.00    0.00    0.00    0.00    0.00     3  |__mysqld\n11:00:58 PM   980         -     25820    0.00    0.00    0.00    0.00    0.00     1  |__mysqld\n11:00:58 PM   980         -     25834    0.02    0.01    0.00    0.01    0.02     3  |__mysqld\n11:00:58 PM   980         -     25835    0.02    0.00    0.00    0.01    0.02     3  |__mysqld\n11:00:58 PM   980         -     25836    0.01    0.00    0.00    0.01    0.02     2  |__mysqld\n11:00:58 PM   980         -     25837    0.01    0.00    0.00    0.01    0.01     0  |__mysqld</code></pre></div>\n<p><code class=\"language-text\">-r</code> shows memory per process, which gives a quick way to check for memory leaks</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># track process memory activity\n-&gt; pidstat -r -p 27766 1\nLinux 4.19.8-arch1-1-ARCH (ix) \t12/30/2018 \t_x86_64_\t(4 CPU)\n\n09:42:59 PM   UID       PID  minflt/s  majflt/s     VSZ     RSS   %MEM  Command\n09:43:00 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld\n09:43:01 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld\n09:43:02 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld\n09:43:03 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld\nAverage:     1000     27766      0.00      0.00  689680   17128   0.15  mysqld</code></pre></div>\n<p>pidstat can start a program with <code class=\"language-text\">-e</code> and show its activity during the execution.</p>\n<p>Besides CPU, pidstat can also show per-process I/O activity</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\"># per-process I/O\n-&gt; pidstat -d 1 5\nLinux 4.20.0-arch1-1-ARCH (ix) \t01/06/2019 \t_x86_64_\t(4 CPU)\n\n04:04:53 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n04:04:54 PM  1000     14423    276.00 197888.00      0.00       1  dd\n04:04:55 PM  1000     14423      0.00 218880.00      0.00       0  dd\n04:04:56 PM  1000     14423      0.00 224664.00      0.00       0  dd\n04:04:57 PM  1000     14423      0.00 230428.00      0.00       0  dd\n04:04:59 PM  1000     14423      0.00 192520.00      0.00       0  dd\nAverage:     1000     14423     46.00 207763.33      0.00       0  dd</code></pre></div>\n<p>If pidstat prints negative values, it means it doesn’t have enough permissions to access the process.\nTry switching to the user running the process (or as root, that should always).</p>\n<p>pidstat supports all these views:</p>\n<ul>\n<li><code class=\"language-text\">-d</code>  I/O statistics</li>\n<li><code class=\"language-text\">-u</code>  CPU statistics</li>\n<li><code class=\"language-text\">-R</code>  process priority</li>\n<li><code class=\"language-text\">-r</code>  memory utilization</li>\n<li><code class=\"language-text\">-s</code>  stack utilization</li>\n<li><code class=\"language-text\">-t</code>  thread statistics</li>\n<li><code class=\"language-text\">-w</code>  task switching</li>\n<li><code class=\"language-text\">-v</code>  file descriptor</li>\n</ul>\n<h2 id=\"putting-it-all-together\" style=\"position:relative;\"><a href=\"#putting-it-all-together\" aria-label=\"putting it all together permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting It All Together</h2>\n<p>These programs complement each other. How would all work together?\nLet’s say we want to find why my machine is running slow.</p>\n<p>The first thing we can check is vmstat:</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">-&gt; vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0 12 773184 3782540 161528 3176304    0    0  1184 38944 2888 9877 20  5  1 74  0\n 2  9 773184 3745748 161528 3213272    0    0  2660 36868 2876 7426 18  7  1 73  0\n 0 11 773184 3630836 161540 3326616    0    0  2688 43052 2959 7064 23  5  1 70  0\n 2 11 771648 2297092 161792 4873416    0    0  2672 40960 3034 7547 23  6  2 69  0\n 1 11 771648 2255008 161796 4915000    0    0  2088 38912 2939 7370 24  6  2 67  0\n 0 11 771648 2142616 161796 4992940    0    0  2148 38916 2976 8061 31  6  1 63  0\n 1 10 771648 2100532 161804 5034252   20    0  1608 41012 3919 9665 34 11  1 54  0\n 0 11 819776 149836 157540 6949188    0    0  1920 12292 2702 5527  6  4  0 90  0</code></pre></div>\n<p>What can you see? A consistent high number of sleeping (b), memory utilization going up, no swapping… that’s good,\ndisks are being written.</p>\n<p>Hmm, a consistently high CPU wait (wa).\nThere are indications of an I/O bottleneck, the CPUs are waiting for disks requests.</p>\n<p>What does mpstat say?</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">mpstat 1\nLinux 4.20.0-arch1-1-ARCH (ix) \t01/06/2019 \t_x86_64_\t(4 CPU)\n\n01:34:49 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n01:34:50 PM  all   24.54    0.00    4.22   68.87    1.06    1.06    0.00    0.00    0.00    0.26\n01:34:51 PM  all   19.05    0.00    3.44   74.87    1.06    0.53    0.00    0.00    0.00    1.06\n01:34:52 PM  all   19.37    0.00    3.14   74.61    0.79    1.05    0.00    0.00    0.00    1.05\n01:34:54 PM  all   22.08    0.00    3.12   62.86    0.52    1.04    0.00    0.00    0.00   10.39</code></pre></div>\n<p>Again there it is, a high iowait. There is something funny going on with the disks.</p>\n<p>Let’s try iostat:</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">iostat -x 1 -y\nLinux 4.20.0-arch1-1-ARCH (ix) \t01/06/2019 \t_x86_64_\t(4 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.00    0.00    0.00    0.00    0.00    0.00\n\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util\nsda             54.00    0.00   2532.00      0.00     0.00     0.00   0.00   0.00    0.57    0.00   0.02    46.89     0.00   0.06   0.30\ndm-0            54.00    0.00   2532.00      0.00     0.00     0.00   0.00   0.00    0.50    0.00   0.03    46.89     0.00   0.24   1.30\nsdd              1.00  347.00      4.00  39512.00     0.00     0.00   0.00   0.00   53.00    5.42   0.99     4.00   113.87   2.86  99.40\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          23.90    0.00    6.49   68.31    0.00    1.30\n\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util\nsda             69.00    0.00   2636.00      0.00     2.00     0.00   2.82   0.00    0.58    0.00   0.06    38.20     0.00   0.29   2.00\ndm-0            71.00    0.00   2636.00      0.00     0.00     0.00   0.00   0.00    1.03    0.00   0.07    37.13     0.00   0.32   2.30\nsdd              0.00  340.00      0.00  38672.00     0.00     0.00   0.00   0.00    0.00    5.84   0.99     0.00   113.74   2.92  99.30</code></pre></div>\n<p>Quite a lot of writes on the <em>sdd</em> device. Even worse, the %util is reaching 100%, the device is saturated\n(%util is only meaningful for spinning disks, RAID or SDD have different capacities)</p>\n<p>So the problem seems to be related with sdd.</p>\n<p>Can we check what processes are doing I/O?</p>\n<div class=\"gatsby-highlight\" data-language=\"nil\"><pre class=\"language-nil\"><code class=\"language-nil\">sudo pidstat -d 1\nLinux 4.20.0-arch1-1-ARCH (ix) \t01/06/2019 \t_x86_64_\t(4 CPU)\n\n01:36:25 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n01:36:26 PM     0      2546      3.81      0.00      0.00     100  kworker/u8:3+flush-8:48\n01:36:26 PM     0      2799      0.00     38.10      0.00      48  jbd2/sdd1-8\n01:36:26 PM   980      3435   1474.29  36323.81      0.00       0  mysqld\n\n01:36:26 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n01:36:27 PM     0      2546      0.00      0.00      0.00      99  kworker/u8:3+flush-8:48\n01:36:27 PM   980      3435   2524.00  35096.00      0.00       0  mysqld</code></pre></div>\n<p>We find a mysql server, a kernel thread flushing data and jbd2 (filesystem journal).</p>\n<p>Aha! we found what has been causing all that troublesome I/O. To continue investigating we would need to get into the database, but\nthis post is getting way too long already. If you are curious, the root cause was some bad queries that were creating temporary tables.</p>\n<h2 id=\"related-links\" style=\"position:relative;\"><a href=\"#related-links\" aria-label=\"related links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Links</h2>\n<ul>\n<li>\n<p>manpages</p>\n<ul>\n<li>vmstat: <a href=\"https://linux.die.net/man/8/vmstat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linux.die.net/man/8/vmstat</a></li>\n<li>iostat: <a href=\"https://linux.die.net/man/1/iostat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linux.die.net/man/1/iostat</a></li>\n<li>mpstat: <a href=\"https://linux.die.net/man/1/mpstat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linux.die.net/man/1/mpstat</a></li>\n<li>pidstat: <a href=\"https://linux.die.net/man/1/pidstat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linux.die.net/man/1/pidstat</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"whats-next\" style=\"position:relative;\"><a href=\"#whats-next\" aria-label=\"whats next permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s Next?</h2>\n<p>How about some long term analysis? Something that can work unattended and do reports? Sounds nice?</p>\n<p>Good, I guess <a href=\"./sar-guide\">next article</a> will be about <strong>sar</strong>.</p>\n<p>So long.</p>\n<p>Tomas</p>","fields":{"slug":"/posts/vmstat-guide","tagSlugs":["/tag/guides/","/tag/monitoring/","/tag/linux/","/tag/unix/"]},"frontmatter":{"date":"2019-01-06T21:12:00-03:00","description":"A getting started guide for vmstat, iostat, mpstat and pidstat.","tags":["guides","monitoring","linux","unix"],"title":"A guide to vmstat and friends","socialImage":"/social/linux.jpg"}}},"pageContext":{"slug":"/posts/vmstat-guide"}}}