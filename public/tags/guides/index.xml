<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>guides on Chaos is order not yet deciphered</title><link>http://tomfern.com/tags/guides/</link><description>Recent content in guides on Chaos is order not yet deciphered</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Jan 2019 00:13:00 -0300</lastBuildDate><atom:link href="http://tomfern.com/tags/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Sysbench for databases</title><link>http://tomfern.com/posts/sysbench-for-databases/</link><pubDate>Wed, 09 Jan 2019 00:13:00 -0300</pubDate><guid>http://tomfern.com/posts/sysbench-for-databases/</guid><description>This is my second part of the sysbench guide, I&amp;rsquo;ll cover here some basic benchmarks for databases. Feel free to check my first part for an introduction.
Connecting to the DB ðŸ”—First things first, we&amp;rsquo;ll need a test database. We&amp;rsquo;ll stick to the default &amp;ldquo;sbtest&amp;rdquo;, so go ahead and create it. I&amp;rsquo;ll wait.
Now sysbench needs the connection parameters. The actual values depend on the target. Sysbench supports MySQL and postgreSQL.</description></item><item><title>Benchmarking with sysbench</title><link>http://tomfern.com/posts/benchmarking-with-sysbench/</link><pubDate>Wed, 09 Jan 2019 00:05:00 -0300</pubDate><guid>http://tomfern.com/posts/benchmarking-with-sysbench/</guid><description>Why, When, How? ðŸ”—Benchmark shows the difference between should and does. Coupled with monitoring it&amp;rsquo;s a great tool to identify bottlenecks.
As to when: whenever we can, as long as the system is production. A good benchmark will stress the server so we don&amp;rsquo;t want users affected. Right after provisioning a server, during a maintenance window, before and after any major changes, these are all good opportunities to take advantage of a few precious minutes of calm to run some tests.</description></item><item><title>MySQLSlap (part 1)</title><link>http://tomfern.com/posts/mysqlslap-part-1/</link><pubDate>Tue, 08 Jan 2019 00:20:00 -0300</pubDate><guid>http://tomfern.com/posts/mysqlslap-part-1/</guid><description>There are loads of ways to benchmark MySQL. mysqlslap was, I believe, one of the first official tools for this. It&amp;rsquo;s bundled with the client tools for MySQL and MariaDB, so you probably already have it installed.
In this post I&amp;rsquo;ll cover the basics and the auto generate sql mode, be sure to read the second part about other ways to use it.
How Does It Work? ðŸ”—mysqlslap uses the same connection parameters as the normal mysql client, so --host --port --socket --username --password all work (but strangely the --defaults-file doesn&amp;rsquo;t).</description></item><item><title>MySQLSlap (part 2)</title><link>http://tomfern.com/posts/mysqlslap-part-2/</link><pubDate>Tue, 08 Jan 2019 00:20:00 -0300</pubDate><guid>http://tomfern.com/posts/mysqlslap-part-2/</guid><description>This is the second part of my mysqlslap guide, you can read the first part
mysqlslap uses the same connection parameters as the normal mysql client, so --host --port --socket --username --password work. In the examples below the parameters will be omitted for brevity&amp;rsquo;s sake.
The Query Mode ðŸ”—Query mode allow us to benchmark ad-hoc queries. It&amp;rsquo;s a quick way to troubleshoot a troublesome query.
In its simplest form we pass the query:</description></item><item><title>System Monitoring with Sar</title><link>http://tomfern.com/posts/system-monitoring-with-sar/</link><pubDate>Mon, 07 Jan 2019 01:40:00 -0300</pubDate><guid>http://tomfern.com/posts/system-monitoring-with-sar/</guid><description>sar is part of the sysstat project, a suite of programs for system monitoring. With sar, we can log system activity, build performance reports and even make plots.
sar is available on Linux, Solaris, AIX and HP-UX.
We can choose to run sar automatically, as an unattended script. Or interactively and get system metrics on the spot.
Unattended Mode ðŸ”—With a simple cron entry we can log system activity. If possible, as root, otherwise some data may be missing.</description></item><item><title>A guide to vmstat and friends</title><link>http://tomfern.com/posts/a-guide-to-vmstat-and-friends/</link><pubDate>Sun, 06 Jan 2019 21:12:00 -0300</pubDate><guid>http://tomfern.com/posts/a-guide-to-vmstat-and-friends/</guid><description>A getting started guide for vmstat, iostat, mpstat and pidstat.
vmstat ðŸ”—Once I figured out how vmstat works, I found that I almost could no longer live without it, it&amp;rsquo;s that good. Fortunately it&amp;rsquo;s available everywhere, so I don&amp;rsquo;t. There are many versions around, both for Linux and Unix.
vmstat does a little bit of everything: memory, processes, I/O, swap, disks, CPU.
The basic syntax is:
vmstat [options] &amp;lt;interval&amp;gt; &amp;lt;count&amp;gt; vmstat prints a new update every interval seconds, stopping after count lines.</description></item></channel></rss>