<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chaos is order not yet deciphered]]></title><description><![CDATA[Tomas Fernandez blog]]></description><link>https://tomfern.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 14 Jun 2020 22:58:09 GMT</lastBuildDate><item><title><![CDATA[Blog Revamped]]></title><description><![CDATA[Behold my new Gatsby-powered blog.]]></description><link>https://tomfern.com/posts/blog-revamp</link><guid isPermaLink="false">https://tomfern.com/posts/blog-revamp</guid><pubDate>Mon, 15 Jun 2020 07:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have been meaning to update the blog for a time, but I‚Äôve been putting it off because I had trouble with my static builder, &lt;a href=&quot;https://gohugo.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Hugo&lt;/a&gt;. I think that I tweaked the theme so badly that it was broken beyond hope.&lt;/p&gt;
&lt;p&gt;Fixing things is boring, so I‚Äôve started a brand new incarnation using &lt;a href=&quot;https://www.gatsbyjs.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Gatsby&lt;/a&gt;, which has an incredible number of plugins and themes to try out. I‚Äôve settled for the minimalistic &lt;a href=&quot;https://www.gatsbyjs.org/starters/alxshelepenok/gatsby-starter-lumen/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Lumen&lt;/a&gt;, which is both easy to use and easy on the eyes üëÄ. So far, I‚Äôm really liking it.&lt;/p&gt;
&lt;p&gt; -Tomas üëã&lt;/p&gt;
&lt;p&gt; PD: I added redirects for the old posts, sorry for breaking links üò±&lt;/p&gt;</content:encoded></item><item><title><![CDATA[10 Vim Plugins for Writers]]></title><description><![CDATA[A text editor is so much more than mere software.]]></description><link>https://tomfern.com/posts/vim-for-writers</link><guid isPermaLink="false">https://tomfern.com/posts/vim-for-writers</guid><pubDate>Sun, 15 Dec 2019 17:04:00 GMT</pubDate><content:encoded>&lt;p&gt;I still remember the first time I came in contact with Vim; it was during my very first job. It was a part-time gig in a government office. A few months in, they decided to go open-source full in. Out the window went Windows and in came Linux. At the time, I was doing PHP development, and I was sorry to have to let go of my dear Dreamweaver.&lt;/p&gt;
&lt;p&gt;I decided that if I had to work on Linux, I would go all the way, no compromises for me. That meant getting used to working on the console and learning Vim.&lt;/p&gt;
&lt;p&gt;When one of the resident Linux gurus walked by my seat and saw my screen, he said, ‚ÄúAre you using Vi? Maybe you‚Äôre not so useless after all.‚Äù (Funny story, I came across him on facebook the other day. Now that he‚Äôs bald, he doesn‚Äôt look intimidating at all).&lt;/p&gt;
&lt;p&gt;Lately, I‚Äôve been writing a lot. I found that armed with the right plugins, Vim is a great tool writing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vim-pencil&lt;/strong&gt;: my favorite writing plugin. &lt;a href=&quot;https://github.com/reedes/vim-pencil&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Vim-pencil&lt;/a&gt; brings a ton of nice things like navigation aids, smarter undo based on punctuation, and proper soft wrapping.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-ditto&lt;/strong&gt;: &lt;a href=&quot;https://github.com/dbmrq/vim-ditto&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;ditto&lt;/a&gt; highlights repeated words in a paragraph, just what I need to avoid repeating words all the time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-goyo&lt;/strong&gt;: a Writeroom lookalike for Vim, &lt;a href=&quot;https://github.com/junegunn/goyo.vim&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;goyo&lt;/a&gt; removes all distracting elements like modeline and line numbers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-colors-pencil&lt;/strong&gt;: an elegant, low contrast &lt;a href=&quot;https://github.com/reedes/vim-colors-pencil&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;colorscheme&lt;/a&gt; geared towards writing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-litecorrect&lt;/strong&gt;: &lt;a href=&quot;https://github.com/reedes/vim-litecorrect&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;litecorrect&lt;/a&gt; automatically corrects common typing errors like ‚Äúteh‚Äù instead of ‚Äúthe‚Äù.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-lexical&lt;/strong&gt;: combined spellchecker and thesaurus. &lt;a href=&quot;https://github.com/reedes/vim-lexical&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Vim-lexical&lt;/a&gt; lets me navigate between spell errors with &lt;code class=&quot;language-text&quot;&gt;]s&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;[s&lt;/code&gt; and quickly find synonyms with &lt;code class=&quot;language-text&quot;&gt;&amp;lt;leader&amp;gt; t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-textobj-sentence&lt;/strong&gt;: a &lt;a href=&quot;https://github.com/reedes/vim-textobj-sentence&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;plugin&lt;/a&gt; for better sentence navigation. I can move between sentences with &lt;code class=&quot;language-text&quot;&gt;(&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;)&lt;/code&gt;, I can cut a sentence with &lt;code class=&quot;language-text&quot;&gt;dis&lt;/code&gt;. Depends on &lt;a href=&quot;https://github.com/kana/vim-textobj-user&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;vim-textobj-user&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-textobj-quote&lt;/strong&gt;: this &lt;a href=&quot;https://github.com/reedes/vim-textobj-quote&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;plugin&lt;/a&gt; smartly creates ‚Äúquotes‚Äù so I don‚Äôt have to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALE&lt;/strong&gt;: the &lt;a href=&quot;https://github.com/dense-analysis/ale&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Asynchronous Lint Engine&lt;/a&gt; is a polyglot analysis tool that is not limited to code. It supports a bunch of style checkers like &lt;a href=&quot;http://proselint.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;proselint&lt;/a&gt; and &lt;a href=&quot;https://languagetool.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;LanguageTool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vim-orgmode&lt;/strong&gt;: I‚Äôll admit that, before I saw the errors of my ways, I communed with &lt;a href=&quot;https://https://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;the one that should not be named&lt;/a&gt;. During the time I used Emacs, I never fully switched away from Vim, that alone should have told me something.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For my labors, I gained something invaluable: I found &lt;a href=&quot;https://orgmode.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Org mode&lt;/a&gt;. For me, Org-mode is the most intuitive and straightforward way of interacting with text. This filetype &lt;a href=&quot;https://github.com/jceb/vim-orgmode&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;plugin&lt;/a&gt; only implements a subset of all its features, but even so, it‚Äôs good enough for my purposes.&lt;/p&gt;
&lt;p&gt;While not Vim-related, I also find these tools irreplaceable in my workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pandoc.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;pandoc&lt;/a&gt;: a command-line markup converter. Supports dozens of formats, including Org-mode and markdown. I usually write in Org and then export to the target type.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://daringfireball.net/projects/titlecase/TitleCase.pl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TitleCase.pl&lt;/a&gt;: John Gruber‚Äôs title case Perl script. I haven‚Äôt found a good native Title Case plugin for Vim, so I just use a &lt;code class=&quot;language-text&quot;&gt;!TitleCase.pl&lt;/code&gt; filter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joeyespo/grip&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;grip&lt;/a&gt;: view local Markdown files with GitHub renderer. I use it to preview how my files will look before pushing them.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
- Grammarly: a life saver, I love it so much I subscribed to the premium plan. Even on the free tier, it‚Äôs so good to spot common mistakes other checkers will miss. It not perfect, but works well with markdown and org-mode content.
- [Hemingway App](http://www.hemingwayapp.com/): I‚Äôm trying this one out. It marks words and sentences that can be
--&gt;
&lt;!--
I don‚Äôt think I‚Äôm going to move away from Vim anymore. I tried most of the other editors: Visual Studio Code, Atom, Sublime Text, Eclipse, and lots more. They just don‚Äôt feel as satisfying to work with as Vim.
--&gt;
&lt;p&gt;Happy writing!&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Case study: MariaDB ColumnStore]]></title><description><![CDATA[Taking advantage of column-based databases.]]></description><link>https://tomfern.com/posts/case-mariadb-columnstore</link><guid isPermaLink="false">https://tomfern.com/posts/case-mariadb-columnstore</guid><pubDate>Mon, 04 Mar 2019 18:29:00 GMT</pubDate><content:encoded>&lt;p&gt;A recent project I worked on provided an opportunity to work with MariaDB ColumnStore.&lt;/p&gt;
&lt;h2 id=&quot;the-product&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-product&quot; aria-label=&quot;the product permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Product&lt;/h2&gt;
&lt;p&gt;The product is a business intelligence application. Its main view, a very comprehensive dashboard with an abundance of counters,
showing all operational aspects: from server status, database backups, support tickets and SLA to datacenter atmospheric conditions.&lt;/p&gt;
&lt;p&gt;In the middle of all this: several MariaDB databases fed through multiple ETL jobs.&lt;/p&gt;
&lt;p&gt;As the application grew, the dashboard got increasingly more intricate. The tables got bigger and the queries slower.
To cope with the higher load, aggregate tables were added at some point. These tables contained precomputed subtotals for various predefined filters.&lt;/p&gt;
&lt;h3 id=&quot;the-issue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-issue&quot; aria-label=&quot;the issue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Issue&lt;/h3&gt;
&lt;p&gt;The aggregate tables worked really well for a very long time.
However, it still had its downsides, all of which got worse as data ingestion rate increased:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db schema and operation gets more complex&lt;/li&gt;
&lt;li&gt;tables need to be updated frequently as new data is added&lt;/li&gt;
&lt;li&gt;higher resource utilization, locks and timeouts during update jobs&lt;/li&gt;
&lt;li&gt;even on the best cases, some lag between precomputed and actual data is always present&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last one was causing the big trouble. Dashboards where getting out of date fast, new data was being added faster than it could be processed.
As a result, users where more frequently seeing stale data.&lt;/p&gt;
&lt;h3 id=&quot;the-requirements&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-requirements&quot; aria-label=&quot;the requirements permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Requirements&lt;/h3&gt;
&lt;p&gt;The main requirement is to have the dashboards to be as close as possible to real time, while keeping page load times within reason.&lt;/p&gt;
&lt;p&gt;Several solutions were proposed, including partitioning, sharding and adding more replication slaves.
After talking and discussing options, we settled trying out MariaDB ColumnStore.&lt;/p&gt;
&lt;p&gt;Some reasons we thought it would be a good solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Familiarity: They were already running MySQL and MariaDB.&lt;/li&gt;
&lt;li&gt;Simplicity: We could get rid of the aggregate tables and their update processes.&lt;/li&gt;
&lt;li&gt;Integration: No need to overhaul the whole setup, we could copy the tables at our convenience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-columnstore&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-columnstore&quot; aria-label=&quot;the columnstore permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The ColumnStore&lt;/h2&gt;
&lt;p&gt;MariaDB ColumnStore (CS) is a special version of MariaDB,
it supports all the traditional MariaDB features while providing an additional storage engine: ColumnStore, for columnar-based tables.&lt;/p&gt;
&lt;p&gt;But while MariaDB has a 1 query = 1 CPU restriction, CS is all about parallelism.
Not only a single query can be processed by multiple CPUs: queries can be distributed among multiple CS servers,&lt;/p&gt;
&lt;h3 id=&quot;the-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-test&quot; aria-label=&quot;the test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Test&lt;/h3&gt;
&lt;p&gt;For the test I was given a modest VM with 8 CPUs and 15 GB of RAM.
We picked a pilot table, extracted one month worth of data from the table (about 5M rows) and proceded to run the tests.&lt;/p&gt;
&lt;p&gt;As a ‚Äúcontrol group‚Äù, a vanilla MariaDB server was installed and the usual production queries were benchmarked.&lt;/p&gt;
&lt;p&gt;Then the second phase began: after removing MariaDB, a CS server was installed and data imported in a ColumnStore table.
Again, bechmarks were run.&lt;/p&gt;
&lt;p&gt;Here are the times to compute an aggregate table:
&lt;img src=&quot;/media/plots/case-mariadb-columnstore/query_load.png&quot; alt=&quot;Computing the aggregate table&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;InnoDB&lt;/th&gt;
&lt;th&gt;ColumnStore&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Query Time&lt;/td&gt;
&lt;td&gt;7.549 s&lt;/td&gt;
&lt;td&gt;0.169 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Quite impressive: about 44 times faster.&lt;/p&gt;
&lt;p&gt;We can‚Äôt claim victory yet, as this does not really reflect the actual user experience.
Remember the app is fed from the precomputed aggregate table.&lt;/p&gt;
&lt;p&gt;The real test is about estimating page load time. How does the realtime aggregation compares against getting the precomputed table?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/case-mariadb-columnstore/opmode2.png&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query Time&lt;/th&gt;
&lt;th&gt;1 thread&lt;/th&gt;
&lt;th&gt;2 threads&lt;/th&gt;
&lt;th&gt;4 threads&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InnoDB&lt;/td&gt;
&lt;td&gt;0.005 s&lt;/td&gt;
&lt;td&gt;0.006 s&lt;/td&gt;
&lt;td&gt;0.010 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColumnStore&lt;/td&gt;
&lt;td&gt;0.169 s&lt;/td&gt;
&lt;td&gt;0.242 s&lt;/td&gt;
&lt;td&gt;0.443 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From the user perspective, performance with CS is &lt;em&gt;worse&lt;/em&gt;, the page load time increases in about 2 orders of magnitude.
True, the data show is as realtime as possible. But can we do better?&lt;/p&gt;
&lt;p&gt;Yes, of course. So far we only scratched the surface.&lt;/p&gt;
&lt;p&gt;MariaDB ColumnStore has 3 modes of operation, these can be set at global level or session level:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mode 0: generic row-by-row mode, highly compatible but much slower.&lt;/li&gt;
&lt;li&gt;Mode 1: distributed, very fast but non-parallelizable queries are rejected.&lt;/li&gt;
&lt;li&gt;Mode 2: automatic, switches between mode 0 and 1 depending on query.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mode 1 is the default, which means it wants to be fed good queries.
To make the previous tests work, I had to switch to mode 0, so we‚Äôre not
getting the best possible performance.&lt;/p&gt;
&lt;p&gt;With a surprisingly little bit of rewriting, the same queries were running on mode 1.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see how well it does:
&lt;img src=&quot;/media/plots/case-mariadb-columnstore/opmodes_vs_innodb.png&quot; alt=&quot;Aggregate table vs ColumnStore&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query Time&lt;/th&gt;
&lt;th&gt;1 thread&lt;/th&gt;
&lt;th&gt;2 threads&lt;/th&gt;
&lt;th&gt;4 threads&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InnoDB (aggregate)&lt;/td&gt;
&lt;td&gt;0.005 s&lt;/td&gt;
&lt;td&gt;0.006 s&lt;/td&gt;
&lt;td&gt;0.010 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColumnStore (mode 1)&lt;/td&gt;
&lt;td&gt;0.048 s&lt;/td&gt;
&lt;td&gt;0.068 s&lt;/td&gt;
&lt;td&gt;0.117 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ColumnStore (mode 0)&lt;/td&gt;
&lt;td&gt;0.169 s&lt;/td&gt;
&lt;td&gt;0.242 s&lt;/td&gt;
&lt;td&gt;0.443 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Query times improved a lot, realtime &lt;em&gt;mode 1&lt;/em&gt; takes only 1 order of magnitude more than getting the precomputed data, that‚Äôs quite a feat.
Page load times are still worse, but it‚Äôs very much within the usual latency for a web application.&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-solution&quot; aria-label=&quot;the solution permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Once the plan was green-lighted, I proceeded to install a proper CS server (only one node for now, but we can add more later).&lt;/p&gt;
&lt;p&gt;To provide load-balancing a MariaDB MaxScale proxy was added.
This proved a key component as it also allows to capture changes on the
main db, which are then sent to CS without needing to modify any other processes.&lt;/p&gt;
&lt;p&gt;With proper load balancing in place, we took to opportunity to add more slave replicas to increase the performance of the general queries.&lt;/p&gt;
&lt;h3 id=&quot;caveats&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#caveats&quot; aria-label=&quot;caveats permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Some problems we encountered along the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all queries were as easy to optimize for mode 1.&lt;/li&gt;
&lt;li&gt;Not all aggregation functions are available for CS tables:
Things like &lt;code class=&quot;language-text&quot;&gt;SUM(FIND_IN_SET(code,&amp;#39;0,1&amp;#39;))&lt;/code&gt; don‚Äôt work. In some cases, we had to add additional columns to work around this.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;ul&gt;
&lt;li&gt;Datatypes in CS are more strict than in MariaDB, JOINS require types to match much more closely.&lt;/li&gt;
&lt;li&gt;Some queries where trying to aggregate too many columns at a time, which probably made sense of a Row based database. But for CS we found
it‚Äôs better to split them in separate queries.&lt;/li&gt;
&lt;li&gt;Big joins can fail due to lack of memory, disk-based joins are disabled by default. Enabling the feature fixes the issue,
but performance goes down fast. As a result, we had to tweak joins and where conditions on some queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB ColumnStore: &lt;a href=&quot;https://mariadb.com/kb/en/library/mariadb-columnstore/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/library/mariadb-columnstore/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operating modes: &lt;a href=&quot;https://mariadb.com/kb/en/library/columnstore-operating-mode/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/library/columnstore-operating-mode/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aggregate functions: &lt;a href=&quot;https://mariadb.com/kb/en/library/columnstore-distributed-aggregate-functions/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/library/columnstore-distributed-aggregate-functions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MariaDB MaxScale: &lt;a href=&quot;https://mariadb.com/kb/en/maxscale/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/maxscale/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Change Data Capture: &lt;a href=&quot;https://mariadb.com/kb/en/mariadb-maxscale-22-change-data-capture-cdc-protocol/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/mariadb-maxscale-22-change-data-capture-cdc-protocol/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;thanks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thanks&quot; aria-label=&quot;thanks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;I‚Äôd like to thank the customer who very graciously allowed me to publish this entry and share the experience.&lt;/p&gt;
&lt;p&gt;Later&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Making the most out of Docker]]></title><description><![CDATA[A few tips to make the most of a Docker.]]></description><link>https://tomfern.com/posts/docker-perf-tips</link><guid isPermaLink="false">https://tomfern.com/posts/docker-perf-tips</guid><pubDate>Sat, 02 Feb 2019 14:21:00 GMT</pubDate><content:encoded>&lt;p&gt;Some options that might increase performance, some that don‚Äôt.&lt;/p&gt;
&lt;h2 id=&quot;network&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#network&quot; aria-label=&quot;network permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Network&lt;/h2&gt;
&lt;p&gt;Containers get connected to a bridge network by default.
A software bridge that allows communication between containers running on the same host &amp;#x26; bridge.
We can also create and use custom bridges, to create isolated groups of containers.
To allow connections from outside, we must map the host‚Äôs ports to a container‚Äôs with &lt;code class=&quot;language-text&quot;&gt;-p&lt;/code&gt; (&lt;em&gt;publish&lt;/em&gt; e.g. -p 3306:3306)
This is easy and flexible, but it makes Docker start an additional process (&lt;em&gt;docker-proxy&lt;/em&gt;), which can use a non-trivial amount of CPU.&lt;/p&gt;
&lt;p&gt;What‚Äôs the alternative? Consider using &lt;code class=&quot;language-text&quot;&gt;--net=host&lt;/code&gt;, which connects the container network directly the host.
In my experience, a considerable boost can be gained, specially when there are multiple connections.&lt;/p&gt;
&lt;p&gt;The downside of this is that we run the risk of inadvertently exposing ports to the outside world.
Moreover, changing service ports is, yet again, a hassle.
We‚Äôll need to deal with configuration settings inside the container.&lt;/p&gt;
&lt;p&gt;How much more we can get out of Docker?
I ran a &lt;a href=&quot;./sysbench-guide-2&quot;&gt;sysbench&lt;/a&gt; OLTP read+write test with 8 threads on MariaDB 10.3.12 to see.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/docker-perf-tips/oltp_rw.png&quot; alt=&quot;Network Types&quot;&gt;&lt;/p&gt;
&lt;p&gt;In my test, host network means about a 37% TPS increase. I‚Äôll let you decide if that is worth letting go of port mapping.&lt;/p&gt;
&lt;h2 id=&quot;storage&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#storage&quot; aria-label=&quot;storage permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Storage&lt;/h2&gt;
&lt;p&gt;Containers are made up of several layers, the top one is the only one that can be written into.
Once a container is stopped and removed, this layer is lost.
The layers are managed by one of Docker‚Äôs storage drivers, which does copy-on-write.
Docker‚Äôs documentation states that this feature reduces performance.&lt;/p&gt;
&lt;p&gt;To provide permanent storage we can use volumes and bind mounts.
Volumes are managed by Docker itself, whereas bind mounts provide a way to map directory or file between the host and the container.
In theory, these methods should be more efficient because they bypass Docker‚Äôs storage driver.&lt;/p&gt;
&lt;p&gt;I was curious about a case in which I had to write lots of data but I didn‚Äôt need persistence.
The best solution would have been to a tmpfs mount, being memory storage, it‚Äôs the fastest.
But we don‚Äôt always have enough memory. What‚Äôs the best other alternative?&lt;/p&gt;
&lt;p&gt;I tested random write speed with &lt;a href=&quot;http://freshmeat.sourceforge.net/projects/fio&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;fio&lt;/a&gt; on an EC2 host with an io1 1000 IOPS volume.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/docker-perf-tips/fio_write_3.png&quot; alt=&quot;Random write speeds&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the mount option really makes no difference for write speeds.&lt;/p&gt;
&lt;p&gt;To put things into perspective I repeated the test with a tmpfs mount.
I had to use a log scale to even see the slower options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/docker-perf-tips/fio_write_4_log.png&quot; alt=&quot;Random write speeds&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;use-limits&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#use-limits&quot; aria-label=&quot;use limits permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use Limits&lt;/h2&gt;
&lt;p&gt;Containers, by default, don‚Äôt have any limits.
Any of them can hoard all the host system‚Äôs resources.
This may be well and fine for development, but a potential disaster for production.&lt;/p&gt;
&lt;p&gt;Thus, a final recommendation: set limits for production containers. At the very least a memory limit.
To avoid swapping and containers getting killed by out of memory errors.
We can also set limits for CPU and disk I/O.&lt;/p&gt;
&lt;p&gt;First, we need to find out suitable limits. We can start the container normally and check resource usage:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker stats &amp;lt;CONTAINER_ID&amp;gt;

CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
529ea41caf55        jolly_borg          3.36%               5.016MiB / 983.9MiB   0.51%               0B / 0B             36.1MB / 24.4GB     7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A lot of details can be found under the &lt;strong&gt;/sys/fs/cgroup&lt;/strong&gt; filesystem.
For example, we can get a great deal of interesting memory counters.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-&amp;gt; cat /sys/fs/cgroup/memory/docker/&amp;lt;FULL_CONTAINER_ID&amp;gt;/memory.stats

cache 41623552
rss 1097854976
rss_huge 0
shmem 15343616
mapped_file 24809472
dirty 0
writeback 0
swap 122916864
pgpgin 91463838
pgpgout 91185552
pgfault 165685756
pgmajfault 3525
inactive_anon 373063680
active_anon 738381824
inactive_file 10625024
active_file 15716352
unevictable 0
hierarchical_memory_limit 9223372036854771712
hierarchical_memsw_limit 9223372036854771712
total_cache 41623552
total_rss 1096085504
total_rss_huge 0
total_shmem 15343616
total_mapped_file 24809472
total_dirty 0
total_writeback 0
total_swap 122916864
total_pgpgin 91463838
total_pgpgout 91186010
total_pgfault 165685756
total_pgmajfault 3525
total_inactive_anon 373063680
total_active_anon 738381824
total_inactive_file 10625024
total_active_file 15716352
total_unevictable 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;To get the full container id: &lt;code class=&quot;language-text&quot;&gt;docker ps --no-trunc&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once we have an estimation, we can try starting a new container with some limits.&lt;/p&gt;
&lt;p&gt;For a hard memory limit, we can use &lt;code class=&quot;language-text&quot;&gt;--memory&lt;/code&gt;.
Use &lt;code class=&quot;language-text&quot;&gt;--cpus&lt;/code&gt; to limit the amount of CPUs available.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When setting a memory limit, Docker will set a swap limit of &lt;code class=&quot;language-text&quot;&gt;--memory&lt;/code&gt; * 2. This can be changed with &lt;code class=&quot;language-text&quot;&gt;--memory-swap&lt;/code&gt;: &lt;em&gt;total swap allowed&lt;/em&gt; = &lt;code class=&quot;language-text&quot;&gt;--memory&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;--memory-swap&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Container limits can even be changed while they are running.
We don‚Äôt need to restart containers as
Docker can change limits at runtime: &lt;code class=&quot;language-text&quot;&gt;docker update&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# set limits, 4 CPUs, 4G of memory, 1G of swap
docker run -it --cpus=4 --memory=4G --memory-swap=5G ubuntu:latest bash
# increase memory limits, 8G memory, 1G of swap
docker update --memory=8G --memory-swap=9G &amp;lt;CONTAINER_ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Benchmark data: &lt;a href=&quot;https://github.com/TomFern/benchmark-data/tree/master/docker-perf-tips&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/TomFern/benchmark-data/tree/master/docker-perf-tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/network/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.docker.com/network/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/storage/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.docker.com/storage/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/config/containers/resource%5Fconstraints/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.docker.com/config/containers/resource%5Fconstraints/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/config/containers/runmetrics/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.docker.com/config/containers/runmetrics/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Container for My Databases]]></title><description><![CDATA[Benchmarking databases and containers.]]></description><link>https://tomfern.com/posts/a-container-for-my-dbs</link><guid isPermaLink="false">https://tomfern.com/posts/a-container-for-my-dbs</guid><pubDate>Fri, 18 Jan 2019 20:59:00 GMT</pubDate><content:encoded>&lt;p&gt;Who doesn‚Äôt like containers? Anyone doesn‚Äôt like to have most of the benefits of virtual machines with much, much less overhead?&lt;/p&gt;
&lt;p&gt;They‚Äôve been around since forever (anyone still remember chroot?)
but only in recent years their popularity boomed, mainly due to cloud computing, I‚Äôm sure.&lt;/p&gt;
&lt;p&gt;I‚Äôve been running databases in docker for a while now. I was curious about other alternatives, so I did a bit of benchmarking.&lt;/p&gt;
&lt;h2 id=&quot;docker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#docker&quot; aria-label=&quot;docker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker&lt;/h2&gt;
&lt;p&gt;It‚Äôs not a coincidence that Docker appeared around the same time container technology began its popularity rise.&lt;/p&gt;
&lt;p&gt;It‚Äôs main selling point is its easy of use and an enormous ecosystem of ready to use images.&lt;/p&gt;
&lt;h2 id=&quot;rkt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rkt&quot; aria-label=&quot;rkt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rkt&lt;/h2&gt;
&lt;p&gt;rkt is an interesting alternative to Docker. rkt has the same features and can even download and run Docker images.&lt;/p&gt;
&lt;p&gt;rkt takes security-minded approach to containers. It supports signed images, a feature sorely needed in Docker.&lt;/p&gt;
&lt;h2 id=&quot;lxc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lxc&quot; aria-label=&quot;lxc permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LXC&lt;/h2&gt;
&lt;p&gt;LXC (linux containers) is the technology that was originally behind docker.&lt;/p&gt;
&lt;p&gt;LXC just runs containers, that‚Äôs it. We can regain some of Docker-like features if we mix in some additional
components like LXD (hypervisor and management) and LXCFS (an overlay filesystem).
For snapshots we can use LVM or an snapshot-capable filesystem.&lt;/p&gt;
&lt;h2 id=&quot;systemd-spawn&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#systemd-spawn&quot; aria-label=&quot;systemd spawn permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;systemd-spawn&lt;/h2&gt;
&lt;p&gt;systemd-nspawn is ‚Äúchroot on steroids‚Äù.
A much simpler tool, it doesn‚Äôt provide any form of image management. It requires a more DIY approach, we need to set up everything by ourselves.&lt;/p&gt;
&lt;p&gt;nspawn, unlike chroot, does provide a network virtualization and it‚Äôs capable of fully booting a linux container.&lt;/p&gt;
&lt;p&gt;It‚Äôs a lightweight alternative worth considering if your linux distribution uses systemd.&lt;/p&gt;
&lt;h2 id=&quot;benchmarks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#benchmarks&quot; aria-label=&quot;benchmarks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;The databases tested are MariaDB 10.3.12 and Postgres 11.1.&lt;/p&gt;
&lt;p&gt;I‚Äôm using &lt;a href=&quot;./sysbench-guide-2&quot;&gt;sysbench&lt;/a&gt;‚Äôs OLTP read+write test, using 1 and 10 threads.
I‚Äôve run each test 3 times, 20 minutes each test. The graph consists of the max, median and min &lt;em&gt;average&lt;/em&gt; TPS values.&lt;/p&gt;
&lt;h3 id=&quot;single-thread&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#single-thread&quot; aria-label=&quot;single thread permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single thread&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/a-container-for-my-dbs/mariadb-rw-1.png&quot; alt=&quot;MariaDB 1 Thread&quot;&gt;
&lt;img src=&quot;/media/plots/a-container-for-my-dbs/postgres-rw-1.png&quot; alt=&quot;PostgreSQL - 1 thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was surprised that docker did so well, I wouldn‚Äôt have been shocked if it were the worst, but it performed best.&lt;/p&gt;
&lt;h3 id=&quot;10-threads&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-threads&quot; aria-label=&quot;10 threads permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10 Threads&lt;/h3&gt;
&lt;p&gt;How does performance change with a higher thread count?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/a-container-for-my-dbs/mariadb-rw-10.png&quot; alt=&quot;MariaDB - 10 threads&quot;&gt;
&lt;img src=&quot;/media/plots/a-container-for-my-dbs/postgres-rw-10.png&quot; alt=&quot;PostgreSQL - 10 threads&quot;&gt;&lt;/p&gt;
&lt;p&gt;A higher load tends to even out things. Docker suffers a bit more with MariaDB.
All in all it doesn‚Äôt look like there is much of a speed difference between container types.&lt;/p&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;benchmark data:  &lt;a href=&quot;https://github.com/TomFern/benchmark-data/tree/master/a-container-for-my-dbs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/TomFern/benchmark-data/tree/master/a-container-for-my-dbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker: &lt;a href=&quot;https://docs.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lxc: &lt;a href=&quot;https://linuxcontainers.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linuxcontainers.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rkt: &lt;a href=&quot;https://coreos.com/rkt/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://coreos.com/rkt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;systemd-nspawn: &lt;a href=&quot;https://wiki.archlinux.org/index.php/systemd-nspawn&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://wiki.archlinux.org/index.php/systemd-nspawn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;thats-it&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thats-it&quot; aria-label=&quot;thats it permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;That‚Äôs it&lt;/h2&gt;
&lt;p&gt;Hope you enjoyed this post. It was fun for me playing around with containers.&lt;/p&gt;
&lt;p&gt;Given that there is not a clear winner yet, I think I‚Äôll stick with Docker for now.&lt;/p&gt;
&lt;p&gt;Have a good one.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Cost of Idle Indexes]]></title><description><![CDATA[A simple benchmark to assess the cost of unused indexes on MariaDB.]]></description><link>https://tomfern.com/posts/cost-of-idle-indexes</link><guid isPermaLink="false">https://tomfern.com/posts/cost-of-idle-indexes</guid><pubDate>Wed, 16 Jan 2019 15:36:00 GMT</pubDate><content:encoded>&lt;p&gt;The last few days I‚Äôve been &lt;a href=&quot;./unused-index-cleanup&quot;&gt;cleaning up indexes&lt;/a&gt;. This entails removing duplicate, unused or redundant indexes.&lt;/p&gt;
&lt;p&gt;There were quite a lot of indexes, so it was hard work. I knew why this was important to do:
as the table changes, indexes need to be kept updated,
less indexes means less updates and less wasted resources.&lt;/p&gt;
&lt;p&gt;But I wanted to have a real number to attach to the theory. How much benefit is there &lt;em&gt;really&lt;/em&gt;? So I decided to run some simple benchmarks
with &lt;a href=&quot;./sysbench-guide-2&quot;&gt;sysbench&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-test&quot; aria-label=&quot;the test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Test&lt;/h2&gt;
&lt;p&gt;The test procedure is really simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a test table&lt;/li&gt;
&lt;li&gt;run the desired benchmark&lt;/li&gt;
&lt;li&gt;add an index&lt;/li&gt;
&lt;li&gt;repeat benchmark&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I started with 1 index (the primary key) and went up in 10 index increments. InnoDB supports up to 64 indexes per table.&lt;/p&gt;
&lt;p&gt;Each particular combination of test + number of indexes was run 3 times. On the plots
we‚Äôll see the median, maximum and minimum values.&lt;/p&gt;
&lt;p&gt;Testing was done on MariaDB 10.3.12 running in a docker container.&lt;/p&gt;
&lt;h2 id=&quot;bulk-insert&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bulk-insert&quot; aria-label=&quot;bulk insert permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bulk Insert&lt;/h2&gt;
&lt;p&gt;Let‚Äôs start with multi-row inserts.
This test is entirely focused on writes, so the number of indexes should have a high impact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/cost-of-indexes/bulk_insert.png&quot; alt=&quot;Bulk insert. 1 thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;RPS with 11 indexes is about 3 times slower. That‚Äôs a lot. 61 indexes perform the worst, almost 13 times worse.&lt;/p&gt;
&lt;h2 id=&quot;oltp-write-only&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-write-only&quot; aria-label=&quot;oltp write only permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Write Only&lt;/h2&gt;
&lt;p&gt;This being a write only test, the number of indexes should still matter a lot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/cost-of-indexes/oltp_wo.png&quot; alt=&quot;OLTP Write Only. 1 thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;11 indexes make transactions 40% slower. A considerable fall in performance. Worse case is a little bit less than 5 times slower.&lt;/p&gt;
&lt;h2 id=&quot;oltp-readwrite&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-readwrite&quot; aria-label=&quot;oltp readwrite permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Read+Write&lt;/h2&gt;
&lt;p&gt;A mix of reads and writes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/plots/cost-of-indexes/oltp_rw.png&quot; alt=&quot;OTLP Read+Write. 1 thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;With 11 indexes there is only about a 10% reduction in TPS. This should be due the fact that read speed is less affected
by extra indexes.&lt;/p&gt;
&lt;h2 id=&quot;oltp-read-only&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-read-only&quot; aria-label=&quot;oltp read only permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Read Only&lt;/h2&gt;
&lt;p&gt;Why does the number of indexes affect read speed?
Well, for one thing the query optimizer needs to check all the indexes on a table (even if they are duplicate),
also there‚Äôs some additional I/O required. So there is a cost, but it should be minimal.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see if it shows in the test.
&lt;img src=&quot;/media/plots/cost-of-indexes/oltp_ro.png&quot; alt=&quot;OTLP Read Only. 1 thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;As expected, TPS does depend on the number of indexes. Compared with previous tests, however, the impact is low:
the worst case, having 61 indexes means a 7% reduction in transaction speed.&lt;/p&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;benchmark data: &lt;a href=&quot;https://github.com/TomFern/benchmark-data/tree/master/cost-of-idle-indexes&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/TomFern/benchmark-data/tree/master/cost-of-idle-indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;No major discoveries here. Everything lines up with what we could have expected. It would be interesting
to repeat the tests with higher a resolution between the first 15 or so indexes. Which, frankly,
is much more common than having 60+.&lt;/p&gt;
&lt;p&gt;Bye.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Unused Index cleanup]]></title><description><![CDATA[Removing unused indexes for improved performance.]]></description><link>https://tomfern.com/posts/unused-index-cleanup</link><guid isPermaLink="false">https://tomfern.com/posts/unused-index-cleanup</guid><pubDate>Wed, 09 Jan 2019 19:15:00 GMT</pubDate><content:encoded>&lt;p&gt;Fixing a query by finding the right index feels great, as if by magic, things are blazing fast again.&lt;/p&gt;
&lt;p&gt;But indexes, like everything in life, needs balancing. As things inevitably change, some indexes will be left abandoned and unused.
What happens then? Well, the database engine must keep them updated regardless, that‚Äôs wasted I/O. They also take up space. Pruning indexes is
the life of any dba.&lt;/p&gt;
&lt;h2 id=&quot;unused-indexes-in-mysql&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#unused-indexes-in-mysql&quot; aria-label=&quot;unused indexes in mysql permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unused Indexes in MySQL&lt;/h2&gt;
&lt;p&gt;Fortunately in MySQL has are two great tools: the &lt;em&gt;performance\&lt;/em&gt;schema&lt;em&gt;, which collects all kind of metrics and the _sys&lt;/em&gt; schema which offers easier-to-read views.&lt;/p&gt;
&lt;p&gt;The first thing to do is ensure that performance_schema is enabled and configured. There is a global configuration setting to enable it, requires restart to take effect.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# my.cnf
# ~~~~~~

[mysqld]
performance_schema=ON&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-- check if performance_schema is enabled
select @@performance_schema;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then there is the runtime configuration to control what types of events to log. This is quite a complex subject because there is so many knobs to turn.&lt;/p&gt;
&lt;p&gt;We‚Äôll cheat, we have indexes to delete, no time to be reading manuals. MySQL Workbench has a &lt;em&gt;Performance Schema Setup&lt;/em&gt; wizard.&lt;/p&gt;
&lt;p&gt;{{&amp;#x3C; figure src=‚Äú/img/performance&lt;em&gt;schema&lt;/em&gt;setup.png‚Äù caption=‚ÄúFigure 1: performance schema setup‚Äù &gt;}}&lt;/p&gt;
&lt;p&gt;{{&amp;#x3C; figure src=‚Äú/img/sys_installer.png‚Äù caption=‚ÄúFigure 2: installing the sys schema‚Äù &gt;}}&lt;/p&gt;
&lt;p&gt;Setting the slider to at least &lt;em&gt;Server Default&lt;/em&gt; should be enough.&lt;/p&gt;
&lt;p&gt;{{&amp;#x3C; figure src=‚Äú/img/performance&lt;em&gt;schema&lt;/em&gt;slider.png‚Äù caption=‚ÄúFigure 3: cheat mode: enabled‚Äù &gt;}}&lt;/p&gt;
&lt;h2 id=&quot;the-catch&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-catch&quot; aria-label=&quot;the catch permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Catch&lt;/h2&gt;
&lt;p&gt;Once everything is set up, we‚Äôll find unused indexes in a view.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; sys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;schema_unused_indexes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/sys-schema-unused-indexes.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;schema_unused_indexes&lt;/a&gt; View&lt;/p&gt;
&lt;p&gt;These views display indexes for which there are no events, which indicates that they are not being used. By default, rows are sorted by schema and table.&lt;/p&gt;
&lt;p&gt;This view is most useful when the server has been up and processing long enough that its workload is representative. Otherwise, presence of an index in this view may not be meaningful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first glance it seems that we need only to check that the server has been running for some time,
i.e. the performance counters are reset on service restart.&lt;/p&gt;
&lt;p&gt;That‚Äôs not entirely true, because all the counters for a particular table are also reset when any of its indexes are &lt;strong&gt;modified&lt;/strong&gt;.
Doing any &lt;code class=&quot;language-text&quot;&gt;alter table [add|remove] index&lt;/code&gt;, marks all the other indexes on that table table as unused.&lt;/p&gt;
&lt;p&gt;If you wish to have some fun test it yourself:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;database&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heroes &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  name &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  hability &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hability&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;into&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heroes &lt;span class=&quot;token keyword&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;the flash&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;speed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;aquaman&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fish language&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;batman&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rich&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;superman&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;all of them&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- use the index and check the counters&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; name &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heroes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; sys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;schema_unused_indexes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- any one of these resets the index usage counters&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heroes &lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; name_hability&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;hability&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heroes &lt;span class=&quot;token keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt; name_hability&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;performance_schema quickstart: &lt;a href=&quot;https://dev.mysql.com/doc/mysql-perfschema-excerpt/8.0/en/performance-schema-quick-start.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://dev.mysql.com/doc/mysql-perfschema-excerpt/8.0/en/performance-schema-quick-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;performance_schema config: &lt;a href=&quot;https://dev.mysql.com/doc/mysql-perfschema-excerpt/8.0/en/performance-schema-runtime-configuration.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://dev.mysql.com/doc/mysql-perfschema-excerpt/8.0/en/performance-schema-runtime-configuration.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;schema_unused_indexes: &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/sys-schema-unused-indexes.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/sys-schema-unused-indexes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-final-word&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-final-word&quot; aria-label=&quot;a final word permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Final Word&lt;/h2&gt;
&lt;p&gt;Here‚Äôs my general strategy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backup the tables, or at the very least export the index definitions (just in case)&lt;/li&gt;
&lt;li&gt;Ensure that both server has been running for enough time &lt;strong&gt;and&lt;/strong&gt; that the table has not been modified recently&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;show table status from &amp;lt;SCHEMA&amp;gt; where name = &amp;lt;TABLE&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Save the list of the unused indexes somewhere safe, you‚Äôll probably lose it after modifying the table&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;create table unused_backup as select * from sys.schema_unused_indexes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Delete the unused indexes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope that helps.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sysbench for databases]]></title><description><![CDATA[Testing database with sysbench]]></description><link>https://tomfern.com/posts/sysbench-guide-2</link><guid isPermaLink="false">https://tomfern.com/posts/sysbench-guide-2</guid><pubDate>Wed, 09 Jan 2019 03:13:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my second part of the sysbench guide, I‚Äôll cover here some basic benchmarks for databases. Feel free to check my &lt;a href=&quot;./sysbench-guide-1&quot;&gt;first part&lt;/a&gt; for an introduction.&lt;/p&gt;
&lt;h2 id=&quot;connecting-to-the-db&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#connecting-to-the-db&quot; aria-label=&quot;connecting to the db permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Connecting to the DB&lt;/h2&gt;
&lt;p&gt;First things first, we‚Äôll need a test database. We‚Äôll stick to the default ‚Äúsbtest‚Äù, so go ahead and create it. I‚Äôll wait.&lt;/p&gt;
&lt;p&gt;Now sysbench needs the connection parameters. The actual values depend on the target. Sysbench supports MySQL and postgreSQL.&lt;/p&gt;
&lt;p&gt;For MySQL, MariaDB or Percona Server the command line options are:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;--db-driver=mysql
--mysql-host=
--mysql-port=
--mysql-user=
--mysql-password=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For postgreSQL, we have:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;--db-driver=pgsql
--pgsql-host=
--pgsql-port=
--pgsql-user=
--pgsql-password=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For brevity‚Äôs sake, I will be &lt;em&gt;omitting these parameters&lt;/em&gt; in the examples below, but they are required so don‚Äôt you forget them.&lt;/p&gt;
&lt;h2 id=&quot;the-test-table&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-test-table&quot; aria-label=&quot;the test table permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Test Table&lt;/h2&gt;
&lt;p&gt;Here we have the prototypical test table&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;sbtest1&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;pad&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;k_1&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf8mb4 &lt;span class=&quot;token keyword&quot;&gt;COLLATE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf8mb4_unicode_ci&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That‚Äôs it. 4 columns: 2 integer and 2 chars. Unfortunately we don‚Äôt have so many built-in options to tweak the table as in other tools such as &lt;a href=&quot;./mysqlslap-guide-1&quot;&gt;mysqlslap&lt;/a&gt;
However, some control is possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto_inc&lt;/code&gt; sets the id column as autoincrement/serial [on]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--create_secondary&lt;/code&gt; creates a secondary index on column k [on]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--mysql_storage_engine&lt;/code&gt; storage engine, only applies to MySQL [innodb]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; column is populated either by the DB (with autoincrement/serial), or by sequential integers generated by sysbench,
&lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; is assigned a random number between 1 and whatever the table size is. The char columns are filled with random numbers,
in groups of 11 digits separated by dashes, no index is created for either &lt;code class=&quot;language-text&quot;&gt;c&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;pad&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;bulk-insert&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bulk-insert&quot; aria-label=&quot;bulk insert permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bulk Insert&lt;/h2&gt;
&lt;p&gt;Bulk insert does concurrent multi-row inserts, we specify how many threads we want and each one inserts into its own table.
So the total number of tables is the same as the number of threads.&lt;/p&gt;
&lt;p&gt;The default is 1 thread. But that is easily changed. Let‚Äôs create 20 tables.&lt;/p&gt;
&lt;p&gt;(remember that the db connection parameters &lt;em&gt;are omitted&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sysbench bulk_insert prepare --threads=20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets insert 1 million rows and see how long it takes. The rows distributed  over all the tables.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# Insert 1M rows total, concurrently on the 20 tables
-&amp;gt; sysbench bulk_insert run --threads=20 --events=1000000 --time=0

sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 20
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            0
        write:                           43
        other:                           0
        total:                           43
    transactions:                        1000000 (144368.49 per sec.)
    queries:                             43     (6.21 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          6.9213s
    total number of events:              1000000

Latency (ms):
         min:                                    0.00
         avg:                                    0.07
         max:                                 2932.57
         95th percentile:                        0.00
         sum:                                67550.48

Threads fairness:
    events (avg/stddev):           50000.0000/13956.14
    execution time (avg/stddev):   3.3775/0.26&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that 1M rows were added using a total of 43 INSERTs statements (an average of 23255.8 rows per INSERT). The total time was about 6.92 seconds.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;latency&lt;/em&gt; statistics are interesting here, the &lt;em&gt;average&lt;/em&gt; time to insert a set of rows was 0.07 milliseconds, but max was way higher, about 2.9 seconds.
This is because the inserted rows are unevenly inserted among the tables, we can see this by comparing the fairness &lt;em&gt;stdev&lt;/em&gt; vs the &lt;em&gt;avg&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After we are satisfied we can drop the tables, and be ready for the next test.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sysbench bulk_insert cleanup --threads=20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;oltp-read-only&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-read-only&quot; aria-label=&quot;oltp read only permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Read-Only&lt;/h2&gt;
&lt;p&gt;OLTP (Online Transaction Processing) tests try simulate transaction-oriented loads in the database, sysbench does this by running several kinds of queries inside a transaction.&lt;/p&gt;
&lt;p&gt;Lets start simple. We want to create 10 tables, each with 10K rows. For a total of 100K rows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# Prepare 10 tables, each with 10K rows
sysbench oltp_read_only prepare --tables=10 --table_size=100000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It‚Äôs usually a good idea to &lt;code class=&quot;language-text&quot;&gt;prewarm&lt;/code&gt; the database, i.e. load the tables into the buffer pool. So we can more accurately simulate the steady-state performance.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sysbench oltp_read_only prewarm --tables=10 --threads=10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the benchmark with 10K events, with a ratio of 2 threads per table&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench oltp_read_only run --tables=10 --threads=20 --events=10000 --time=0

sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 20
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            140000
        write:                           0
        other:                           20000
        total:                           160000
    transactions:                        10000  (1077.22 per sec.)
    queries:                             160000 (17235.59 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          9.2813s
    total number of events:              10000

Latency (ms):
         min:                                    4.37
         avg:                                   18.54
         max:                                   69.91
         95th percentile:                       29.19
         sum:                               185396.12

Threads fairness:
    events (avg/stddev):           500.0000/4.46
    execution time (avg/stddev):   9.2698/0.01&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, this is interesting: Why did we get 140K reads when we asked for 10K events?&lt;/p&gt;
&lt;p&gt;Sysbench by default runs the following statements per event:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10 x point selects: &lt;code class=&quot;language-text&quot;&gt;select c from table where id=i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x simple range: &lt;code class=&quot;language-text&quot;&gt;select c from table where id between a and b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x sum range: &lt;code class=&quot;language-text&quot;&gt;select sum(k) from table where id between a and b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x order range: &lt;code class=&quot;language-text&quot;&gt;select c from table where id between a and b order by c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x distinct range: &lt;code class=&quot;language-text&quot;&gt;select distinct c from table where id between a and b order by c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When done, delete the tables.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sysbench oltp_read_only cleanup --tables=20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wasn‚Äôt that fun?&lt;/p&gt;
&lt;h2 id=&quot;oltp-write-only&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-write-only&quot; aria-label=&quot;oltp write only permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Write Only&lt;/h2&gt;
&lt;p&gt;This is the write counterpart of the previous test. By now, you know the drill, right?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sysbench oltp_write_only prepare --tables=10
sysbench oltp_write_only prewarm --tables=10 --threads=10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets use a time limit instead:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench oltp_write_only run --tables=10 --threads=20 --events=0 --time=30

sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 20
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            0
        write:                           341181
        other:                           170918
        total:                           512099
    transactions:                        85123  (2836.18 per sec.)
    queries:                             512099 (17062.42 per sec.)
    ignored errors:                      672    (22.39 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          30.0117s
    total number of events:              85123

Latency (ms):
         min:                                    0.53
         avg:                                    7.05
         max:                                   67.17
         95th percentile:                       14.21
         sum:                               599892.48

Threads fairness:
    events (avg/stddev):           4256.1500/49.08
    execution time (avg/stddev):   29.9946/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each write_only event consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 x index_updates: &lt;code class=&quot;language-text&quot;&gt;update table set k~k+1 where id=i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x non_index_updates: &lt;code class=&quot;language-text&quot;&gt;update table set c=? where id=i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 x delete_inserts: &lt;code class=&quot;language-text&quot;&gt;delete from table where id~i; insert into table (id, k, c, pad) values (...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using a time stop condition, we‚Äôll want to compare rates, such as &lt;em&gt;queries per second&lt;/em&gt; or &lt;em&gt;transactions per second&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;oltp-read-write&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oltp-read-write&quot; aria-label=&quot;oltp read write permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OLTP Read Write&lt;/h2&gt;
&lt;p&gt;This test combines the last two in one package. First it runs the same code as in oltp_read_only and then continues with oltp_write_only.
We can even reuse the table from the previous benchmark.&lt;/p&gt;
&lt;p&gt;The transaction content for tests can be tweaked.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--range_selects&lt;/code&gt; Enable/disable all range SELECT queries [on]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--range_size&lt;/code&gt; Range size for range SELECT queries [100]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--simple_ranges&lt;/code&gt; Simple range SELECT queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--point_selects&lt;/code&gt; Point SELECT queries per transaction [10]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--order_ranges&lt;/code&gt; SELECT ORDER BY queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--distinct_ranges&lt;/code&gt; SELECT DISTINCT queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--delete_inserts&lt;/code&gt; DELETE/INSERT combinations per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--index_updates&lt;/code&gt; UPDATE index queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--non_index_updates&lt;/code&gt; UPDATE non-index queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--sum_ranges&lt;/code&gt;  SELECT SUM() queries per transaction [1]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--skip_trx&lt;/code&gt; Don‚Äôt start explicit transactions (use AUTOCOMMIT) [off]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sysbench‚Äôs github: &lt;a href=&quot;https://github.com/akopytov/sysbench&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/akopytov/sysbench&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These aren‚Äôt the only DB tests that ship with sysbench, but the basic procedure is basically the same.&lt;/p&gt;
&lt;p&gt;Until next time.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Benchmarking with sysbench]]></title><description><![CDATA[A getting started guide to benchmarking with sysbench]]></description><link>https://tomfern.com/posts/sysbench-guide-1</link><guid isPermaLink="false">https://tomfern.com/posts/sysbench-guide-1</guid><pubDate>Wed, 09 Jan 2019 03:05:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;why-when-how&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-when-how&quot; aria-label=&quot;why when how permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why, When, How?&lt;/h2&gt;
&lt;p&gt;Benchmark shows the difference between should and does. Coupled with &lt;a href=&quot;../tag/monitoring&quot;&gt;monitoring&lt;/a&gt; it‚Äôs a great tool to identify bottlenecks.&lt;/p&gt;
&lt;p&gt;As to when: whenever we can, as long as the system is production. A good benchmark will stress the server so we don‚Äôt want users affected.
Right after provisioning a server, during a maintenance window, before and after any major changes, these are all good opportunities to take advantage of a few precious
minutes of calm to run some tests.&lt;/p&gt;
&lt;p&gt;We should try to mimic as best as possible the behaviour of the software we have.
Is it single or multithreaded? Is it on more CPU bound or disk IO bound. Does it access data randomly or sequentially?
Does it manage data on fixed-size blocks?&lt;/p&gt;
&lt;h2 id=&quot;introducing-sysbench&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introducing-sysbench&quot; aria-label=&quot;introducing sysbench permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducing Sysbench&lt;/h2&gt;
&lt;p&gt;Sysbench is a popular benchmark tool that is available for linux, mac and can even run on windows (with it‚Äôs subsystem for linux).
It ships with tests for the OS and databases. It is extensible and scriptable, so writing our own tests is possible.&lt;/p&gt;
&lt;p&gt;If you are running linux, it‚Äôs most likely available in your distribution repository. Otherwise head to sysbench‚Äôs &lt;a href=&quot;https://github.com/akopytov/sysbench&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;github&lt;/a&gt; for instructions.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#getting-started&quot; aria-label=&quot;getting started permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The general syntax is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;sysbench &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;testname&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;action&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;test-specific options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sysbench has quite a few options, but help a few keystrokes away. To get to the general help:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;sysbench --help&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for the specific test use:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;sysbench &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;testname&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;help&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some tests have a &lt;em&gt;prepare&lt;/em&gt; and &lt;em&gt;cleanup&lt;/em&gt; action, some also have an optional &lt;em&gt;warmup&lt;/em&gt; action, others can be &lt;em&gt;run&lt;/em&gt; directly.&lt;/p&gt;
&lt;h2 id=&quot;the-test-loop&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-test-loop&quot; aria-label=&quot;the test loop permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Test Loop&lt;/h2&gt;
&lt;p&gt;All tests have a common structure, the requested number of worker threads are created, each one will run its own test loop,
each iteration of the loop is called an &lt;em&gt;event&lt;/em&gt; and can have any number of operations. Sysbench keeps counters on all events across all threads.&lt;/p&gt;
&lt;p&gt;When it‚Äôs done, we get the statistics for all events. Under &lt;em&gt;latency&lt;/em&gt; we can see the average event duration.
These values are common to all tests.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;...
General statistics:
    total time:                          10.0014s
    total number of events:              32479

Latency (ms):
         min:                                    1.11
         avg:                                    2.46
         max:                                   41.95
         95th percentile:                       11.24
         sum:                                79934.27

Threads fairness:
    events (avg/stddev):           4059.8750/59.44
    execution time (avg/stddev):   9.9918/0.01&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On multithreaded tests we want that events are distributed fairly among all threads, i.e. all threads should execute approximately the same number of events.
This is shown under &lt;em&gt;fairness&lt;/em&gt;, the &lt;em&gt;stddev&lt;/em&gt; (standard deviation) should be small in relation to the &lt;em&gt;average&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most of the benchmarks will run for a specified time or until a certain condition is met. The default time limit is 10 seconds, but we can
change that using &lt;code class=&quot;language-text&quot;&gt;--time&lt;/code&gt;. Alternatively we can set a limit number of &lt;code class=&quot;language-text&quot;&gt;--events&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;testing-your-cpus&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testing-your-cpus&quot; aria-label=&quot;testing your cpus permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Your CPUs&lt;/h2&gt;
&lt;p&gt;In this first test we‚Äôll torture the CPUs by computing prime numbers.
Each single event will check prime numbers up to the provided &lt;code class=&quot;language-text&quot;&gt;--cpu-max-prime&lt;/code&gt;.
The higher this value is, the longer it takes an event to end.&lt;/p&gt;
&lt;p&gt;I usually like to start with single threadetest. I try to find a &lt;code class=&quot;language-text&quot;&gt;--cpu-max-prime&lt;/code&gt; that will take at least a few seconds to complete.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# sysbench cpu test, single event
-&amp;gt; sysbench cpu run --threads=1 --events=1 --cpu-max-prime=8000000
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Prime numbers limit: 8000000

Initializing worker threads...

Threads started!

CPU speed:
    events per second:     0.09

General statistics:
    total time:                          11.2315s
    total number of events:              1

Latency (ms):
         min:                                11231.45
         avg:                                11231.45
         max:                                11231.45
         95th percentile:                    11317.84
         sum:                                11231.45

Threads fairness:
    events (avg/stddev):           1.0000/0.00
    execution time (avg/stddev):   11.2314/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With a suitable max prime number found, the next step is to run a longer test.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# sysbench cpu, single thread
-&amp;gt; sysbench cpu run --threads=1 --time=60 --cpu-max-prime=8000000
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Prime numbers limit: 8000000

Initializing worker threads...

Threads started!

CPU speed:
    events per second:     0.09

General statistics:
    total time:                          67.5691s
    total number of events:              6

Latency (ms):
         min:                                11217.78
         avg:                                11261.48
         max:                                11302.15
         95th percentile:                    11317.84
         sum:                                67568.87

Threads fairness:
    events (avg/stddev):           6.0000/0.00
    execution time (avg/stddev):   67.5689/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On &lt;em&gt;average&lt;/em&gt;, it took 11.261 seconds to calculate primes up to our limit.
A lower average is better, since it means the CPU takes less time to reach the same point. For the same reason, a higher value in &lt;em&gt;events per second&lt;/em&gt; is better.&lt;/p&gt;
&lt;p&gt;If we are going to run multithreaded applications we need to run another test with an appropiate number &lt;code class=&quot;language-text&quot;&gt;--threads&lt;/code&gt;.
For example in a system with 4 cores with hyperthreading this is a good starting point.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# cpu test, 8 threads
-&amp;gt; sysbench cpu run --threads=8 --time=60 --cpu-max-prime=8000000
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 8
Initializing random number generator from current time


Prime numbers limit: 8000000

Initializing worker threads...

Threads started!

CPU speed:
    events per second:     0.29

General statistics:
    total time:                          82.1154s
    total number of events:              24

Latency (ms):
         min:                                26514.20
         avg:                                27212.58
         max:                                28103.35
         95th percentile:                    27846.48
         sum:                               653101.88

Threads fairness:
    events (avg/stddev):           3.0000/0.00
    execution time (avg/stddev):   81.6377/0.36&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;testing-your-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testing-your-memory&quot; aria-label=&quot;testing your memory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Your Memory&lt;/h2&gt;
&lt;p&gt;For memory we can test either &lt;em&gt;write&lt;/em&gt; or &lt;em&gt;read&lt;/em&gt; speeds, the mode is selected with &lt;code class=&quot;language-text&quot;&gt;--memory-open&lt;/code&gt;.
We can choose between sequential (&lt;em&gt;seq&lt;/em&gt;) and random (&lt;em&gt;rnd&lt;/em&gt;) access modes with &lt;code class=&quot;language-text&quot;&gt;--memory-access-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This benchmark has a special stop condition: &lt;code class=&quot;language-text&quot;&gt;--memory-total-size&lt;/code&gt;. Bear in mind, this isn‚Äôt the total size allocated in RAM.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# memory, no time limit, stop on 100GB written
-&amp;gt; sysbench memory run --memory-total-size=100G --memory-open=write --memory-access-mode=rnd --time=0
WARNING: Both event and time limits are disabled, running an endless test
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Running memory speed test with the following options:
  block size: 1KiB
  total size: 102400MiB
  operation: write
  scope: global

Initializing worker threads...

Threads started!

Total operations: 104857600 (5010197.95 per second)

102400.00 MiB transferred (4892.77 MiB/sec)


General statistics:
    total time:                          20.9272s
    total number of events:              104857600

Latency (ms):
         min:                                    0.00
         avg:                                    0.00
         max:                                    0.38
         95th percentile:                        0.00
         sum:                                10816.80

Threads fairness:
    events (avg/stddev):           104857600.0000/0.00
    execution time (avg/stddev):   10.8168/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The latency is measured in milliseconds, it‚Äôs just to big of a unit for memory speeds so it‚Äôs not very useful here.
But we can think of the &lt;em&gt;MiB per seconds&lt;/em&gt; as the average speed.&lt;/p&gt;
&lt;p&gt;If we have a service that work with fixed-size blocks, for example if plan to have a database,
we should set &lt;code class=&quot;language-text&quot;&gt;--memory-block-size&lt;/code&gt; to match it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# some memory tests for MySQL (page size is 16K)
sysbench memory run --threads=8 --memory-block-size=16K --memory-total-size=100G --memory-oper=write
sysbench memory run --threads=8 --memory-block-size=16K --memory-total-size=100G --memory-oper=read&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;testing-your-disk-io-speed&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testing-your-disk-io-speed&quot; aria-label=&quot;testing your disk io speed permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Your Disk I/O Speed&lt;/h2&gt;
&lt;p&gt;Before starting, we need to &lt;em&gt;prepare&lt;/em&gt; a file or set of files to work on. We set the &lt;strong&gt;total&lt;/strong&gt; space to allocate with &lt;code class=&quot;language-text&quot;&gt;--file-total-size&lt;/code&gt; (which must be at least 2GB)
and how many files there will be in the set, the space will be split into even sized files.&lt;/p&gt;
&lt;p&gt;We probably want to avoid caching the files in memory because we wouldn‚Äôt be measuring the true disk spee,
so it might me a good idea to include &lt;code class=&quot;language-text&quot;&gt;--file-extra-flags=direct&lt;/code&gt; to bypass it.&lt;/p&gt;
&lt;p&gt;It‚Äôs generally recommended, whenever possible, that allocated space is larger than the installed RAM, just in case caching is taking place in spite of our best efforts.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench fileio prepare --file-num=10 --file-total-size=10G --file-extra-flags=direct

sysbench 1.0.15 (using system LuaJIT 2.0.5)

10 files, 1048576Kb each, 10240Mb total
Creating files for the test...
Extra file open flags: (none)
Creating file test_file.0
Creating file test_file.1
Creating file test_file.2
Creating file test_file.3
Creating file test_file.4
Creating file test_file.5
Creating file test_file.6
Creating file test_file.7
Creating file test_file.8
Creating file test_file.9
10737418240 bytes written in 45.15 seconds (226.78 MiB/sec).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;prepare&lt;/em&gt; can reutilize previous test files, but it only can &lt;strong&gt;grow&lt;/strong&gt; them, so we can only reuse test files if they are bigger or equal than before. Otherwise we must &lt;em&gt;cleanup&lt;/em&gt; and &lt;em&gt;prepare&lt;/em&gt; again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we need to choose a &lt;code class=&quot;language-text&quot;&gt;--file-test-mode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seqwr: sequential write&lt;/li&gt;
&lt;li&gt;seqrewr: sequential read+write&lt;/li&gt;
&lt;li&gt;seqrd: sequential read&lt;/li&gt;
&lt;li&gt;rndrd: random read&lt;/li&gt;
&lt;li&gt;rndwr: random write&lt;/li&gt;
&lt;li&gt;rndrw: random read write&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# file read-write test
-&amp;gt; sysbench fileio run --file-num=10 --file-total-size=10G --file-test-mode=rndrw --file-extra-flags=direct --time=60

sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Extra file open flags: directio
10 files, 1GiB each
10GiB total file size
Block size 16KiB
Number of IO requests: 0
Read/Write ratio for combined random IO test: 1.50
Periodic FSYNC enabled, calling fsync() each 100 requests.
Calling fsync() at the end of test, Enabled.
Using synchronous I/O mode
Doing random r/w test
Initializing worker threads...

Threads started!


File operations:
    reads/s:                      2388.59
    writes/s:                     1592.38
    fsyncs/s:                     398.14

Throughput:
    read, MiB/s:                  37.32
    written, MiB/s:               24.88

General statistics:
    total time:                          60.0027s
    total number of events:              262756

Latency (ms):
         min:                                    0.06
         avg:                                    0.23
         max:                                   77.63
         95th percentile:                        0.39
         sum:                                59796.75

Threads fairness:
    events (avg/stddev):           262756.0000/0.00
    execution time (avg/stddev):   59.7967/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As always, it‚Äôs a good idea to try to match as best as possible the disk IO activity for our application. We have some flexibility here
with additional options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-num&lt;/code&gt; number of files [128]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-block-size&lt;/code&gt; block size [16384]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-total-size&lt;/code&gt; total size  [2G]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-test-mode&lt;/code&gt; test mode: seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-io-mode&lt;/code&gt; file operations mode: sync,async,mmap [sync]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-async-backlog&lt;/code&gt; number of asynchronous requests per thread [128]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-extra-flags&lt;/code&gt; list of additional flags to use to open files: sync,dsync,direct&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-fsync-freq&lt;/code&gt; fsync() every N requests [100]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-fsync-all&lt;/code&gt; fsync() after each write [off]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-fsync-end&lt;/code&gt; fsync() at the end of test [on]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-fsync-mode&lt;/code&gt; method for sync: fsync, fdatasync [fsync]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-merged-requests&lt;/code&gt; max I/O request to merge [0]&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--file-rw-ratio&lt;/code&gt; reads/writes ratio for combined test [1.5]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example, for a system destined to run a MySQL server we could try something like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# a test simulating MySQL file activity
sysbench fileio run --threads=8 --file-extra-flags=direct --file-test-mode=rndrw --file-num=10 --file-block-size=1M --file-block-size=16K&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After running our tests, we need only to remove the work files with &lt;em&gt;cleanup&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench fileio cleanup --file-num=10

sysbench 1.0.15 (using system LuaJIT 2.0.5)

Removing test files...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;testing-mutexes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testing-mutexes&quot; aria-label=&quot;testing mutexes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Mutexes&lt;/h2&gt;
&lt;p&gt;This benchmark is intended to test the speed for mutex locks (mutex stands for ‚Äúmutual exclusion‚Äù).
Which play an important role in multithreading. It simulates high concurrency, with threads acquiring and releasing locks all the time.&lt;/p&gt;
&lt;p&gt;Sysbench creates an initial pool of &lt;code class=&quot;language-text&quot;&gt;--mutex-num&lt;/code&gt; mutexes, then it starts the threads, which iterate over an empty loop, every &lt;code class=&quot;language-text&quot;&gt;--mutex-loops&lt;/code&gt; the thread will
grab one random mutex from the pool, modify a global variable, and release it. Each event will acquire and release the mutexes until the &lt;code class=&quot;language-text&quot;&gt;--mutex-locks&lt;/code&gt; value is reached.&lt;/p&gt;
&lt;p&gt;Here &lt;code class=&quot;language-text&quot;&gt;--time&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;--events&lt;/code&gt; are completely ignored. Sysbench always runs one event per thread.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench mutex run --threads=10
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 10
Initializing random number generator from current time


Initializing worker threads...

Threads started!


General statistics:
    total time:                          0.8845s
    total number of events:              10

Latency (ms):
         min:                                  802.84
         avg:                                  855.55
         max:                                  873.81
         95th percentile:                      877.61
         sum:                                 8555.51

Threads fairness:
    events (avg/stddev):           1.0000/0.00
    execution time (avg/stddev):   0.8556/0.02&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;testing-threads&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testing-threads&quot; aria-label=&quot;testing threads permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing Threads&lt;/h2&gt;
&lt;p&gt;Here we have a test for the CPU scheduler. It can simulate high concurrency conditions, where multiple threads
compete for mutexes.&lt;/p&gt;
&lt;p&gt;Each thread will take &lt;code class=&quot;language-text&quot;&gt;--thread-locks&lt;/code&gt; mutexes and yield the CPU. This causes the thread to stop running and is placed on the run queue by the scheduler.
Once the thread is again scheduled to run, the mutexes are released.&lt;/p&gt;
&lt;p&gt;A single event will perform these actions &lt;code class=&quot;language-text&quot;&gt;--thread-yields&lt;/code&gt; times, so the higher this number, the higher the concurrency placed on each mutex,
and the lower the number of events per second.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; sysbench threads run --threads=4 --thread-yields=1000 --thread-locks=10
sysbench 1.0.15 (using system LuaJIT 2.0.5)

Running the test with following options:
Number of threads: 4
Initializing random number generator from current time


Initializing worker threads...

Threads started!


General statistics:
    total time:                          10.0005s
    total number of events:              50754

Latency (ms):
         min:                                    0.50
         avg:                                    0.79
         max:                                   14.37
         95th percentile:                        0.81
         sum:                                39980.48

Threads fairness:
    events (avg/stddev):           12688.5000/54.38
    execution time (avg/stddev):   9.9951/0.00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sysbench‚Äôs github: &lt;a href=&quot;https://github.com/akopytov/sysbench&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/akopytov/sysbench&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-label=&quot;whats next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What‚Äôs Next?&lt;/h2&gt;
&lt;p&gt;Whew, that was a longer post than I intended and to think I only covered a part of it all.&lt;/p&gt;
&lt;p&gt;There is still more to say about sysbench, check the &lt;a href=&quot;./sysbench-guide-2&quot;&gt;second part&lt;/a&gt; where I deal with databases, so the fun is just starting.&lt;/p&gt;
&lt;p&gt;So long.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[MySQLSlap (part 1)]]></title><description><![CDATA[A guide to benchmarking with mysqlslap.]]></description><link>https://tomfern.com/posts/mysqlslap-guide-1</link><guid isPermaLink="false">https://tomfern.com/posts/mysqlslap-guide-1</guid><pubDate>Tue, 08 Jan 2019 03:20:00 GMT</pubDate><content:encoded>&lt;p&gt;There are loads of ways to benchmark MySQL. &lt;code class=&quot;language-text&quot;&gt;mysqlslap&lt;/code&gt; was, I believe, one of the first official tools for this. It‚Äôs bundled with the client tools for MySQL and MariaDB,
so you probably already have it installed.&lt;/p&gt;
&lt;p&gt;In this post I‚Äôll cover the basics and the &lt;em&gt;auto generate sql&lt;/em&gt; mode, be sure to read the &lt;a href=&quot;./mysqlslap-guide-2&quot;&gt;second part&lt;/a&gt; about other ways to use it.&lt;/p&gt;
&lt;h2 id=&quot;how-does-it-work&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-does-it-work&quot; aria-label=&quot;how does it work permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How Does It Work?&lt;/h2&gt;
&lt;p&gt;mysqlslap uses the same connection parameters as the normal mysql client, so &lt;code class=&quot;language-text&quot;&gt;--host&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--port&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--socket&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--username&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--password&lt;/code&gt; all work
(but strangely the &lt;code class=&quot;language-text&quot;&gt;--defaults-file&lt;/code&gt; doesn‚Äôt).&lt;/p&gt;
&lt;p&gt;In the examples below, however, the parameters &lt;em&gt;will be omitted&lt;/em&gt; for brevity‚Äôs sake.&lt;/p&gt;
&lt;p&gt;mysqlslap works in 3 stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create test schema&lt;/li&gt;
&lt;li&gt;run test as multiple clients&lt;/li&gt;
&lt;li&gt;delete test schema.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first and last are executed as a single connection, only in the middle step time is measured.&lt;/p&gt;
&lt;h2 id=&quot;auto-generate-sql&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#auto-generate-sql&quot; aria-label=&quot;auto generate sql permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto Generate Sql&lt;/h2&gt;
&lt;p&gt;In auto generate sql mode, mysqlslap will handle table and queries. No need to write any SQL.&lt;/p&gt;
&lt;p&gt;This mode activated with &lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql&lt;/code&gt; (or in short form: &lt;code class=&quot;language-text&quot;&gt;-a&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --auto-generate-sql --auto-generate-sql-load-type=read --auto-generate-sql-execute-number=10
Benchmark
        Average number of seconds to run all queries: 0.004 seconds
        Minimum number of seconds to run all queries: 0.004 seconds
        Maximum number of seconds to run all queries: 0.004 seconds
        Number of clients running queries: 1
        Average number of queries per client: 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happened?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;mysqlslap&lt;/code&gt; schema was created&lt;/li&gt;
&lt;li&gt;A test table &lt;code class=&quot;language-text&quot;&gt;t1&lt;/code&gt; was created. It has 1 integer and 1 varchar(128) column, no explicit primary key&lt;/li&gt;
&lt;li&gt;The table was populated with random rows&lt;/li&gt;
&lt;li&gt;A full table SELECT is run 10 times, sequentially, from a single connection&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;mysqlslap&lt;/code&gt; schema is dropped&lt;/li&gt;
&lt;li&gt;The total time taken reported&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let‚Äôs break down the options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-load-type&lt;/code&gt; what is the test type to run&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-execute-number&lt;/code&gt; how many queries to execute per client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is different about this next one?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# simulating 10 clients
-&amp;gt; mysqlslap --auto-generate-sql --auto-generate-sql-load-type=read --auto-generate-sql-execute-number=1 --concurrency=10
Benchmark
        Average number of seconds to run all queries: 0.015 seconds
        Minimum number of seconds to run all queries: 0.015 seconds
        Maximum number of seconds to run all queries: 0.015 seconds
        Number of clients running queries: 10
        Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one runs the same total number of SELECTs as before, however it does it in parallel.
There are 10 clients running the a single query. We get the total taken to run the 10 queries.&lt;/p&gt;
&lt;p&gt;Did you notice the times reported? Why is it that we get the same values for average, max and min?
This is because so far we ran the test only 1 time. We can choose to repeat the test using then &lt;code class=&quot;language-text&quot;&gt;--iterations&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# 100 iterations, 10 clients
-&amp;gt; mysqlslap --auto-generate-sql --auto-generate-sql-load-type=read --auto-generate-sql-execute-number=1 --concurrency=10 --iterations=100
Benchmark
        Average number of seconds to run all queries: 0.006 seconds
        Minimum number of seconds to run all queries: 0.001 seconds
        Maximum number of seconds to run all queries: 0.015 seconds
        Number of clients running queries: 10
        Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What changed?
Essentially the whole thing (schema created and dropped) is done 100 times.
Now times are different because we added some variability.&lt;/p&gt;
&lt;h2 id=&quot;what-other-things-can-it-do&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-other-things-can-it-do&quot; aria-label=&quot;what other things can it do permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What Other Things Can It Do?&lt;/h2&gt;
&lt;p&gt;We can try other types of tests, &lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-load-type&lt;/code&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read: &lt;code class=&quot;language-text&quot;&gt;SELECT * FROM table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write: &lt;code class=&quot;language-text&quot;&gt;INSERT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;key: &lt;code class=&quot;language-text&quot;&gt;SELECT (primary keys columns)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;update: &lt;code class=&quot;language-text&quot;&gt;UPDATE (primary keys)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mixed: &lt;code class=&quot;language-text&quot;&gt;INSERT INTO table; SELECT * FROM table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mixed mode is the default, it generates 2 queries and both count towards the &lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-execute-number&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --auto-generate-sql --auto-generate-sql-execute-number=10
Benchmark
        Average number of seconds to run all queries: 0.006 seconds
        Minimum number of seconds to run all queries: 0.006 seconds
        Maximum number of seconds to run all queries: 0.006 seconds
        Number of clients running queries: 1
        Average number of queries per client: 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we asked to generate 10 queries, mysqlslap ran 5 INSERTS and 5 SELECTs. We get the total time to run all the queries.&lt;/p&gt;
&lt;p&gt;The generated table can be tweaked with the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--number-char-cols&lt;/code&gt; number of varchar columns (1)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--number-int-cols&lt;/code&gt; number of integer columns (1)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-guid-primary&lt;/code&gt; add a varchar(36) primary column (none)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-add-autoincrement&lt;/code&gt; add an auto-increment bigint column with an unique index (none)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-secondary-indexes&lt;/code&gt; generate n integer columns with unique indexes (0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The table row distribution can be further tweaked with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-write-number&lt;/code&gt; how many rows to insert into test table (100)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--auto-generate-sql-unique-query-number&lt;/code&gt; how many unique rows, so we can play with cardinality (10)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other commonly used options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-vv&lt;/code&gt; show verbose output&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--csv&lt;/code&gt; output into CSV file&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--no-drop&lt;/code&gt; don‚Äôt drop the schema when done&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;--create-schema&lt;/code&gt; use a different test schema name&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB‚Äôs mysqlslap: &lt;a href=&quot;https://mariadb.com/kb/en/library/mysqlslap/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/library/mysqlslap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySQL‚Äôs mysqlslap: &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqlslap.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/mysqlslap.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;mysqlslap is, arguably, a simple benchmark tool, but sometimes simpler is better.&lt;/p&gt;
&lt;p&gt;And since we can almost always count on having it installed it‚Äôs a good idea to get familiarized with it.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;./mysqlslap-guide-2&quot;&gt;next part&lt;/a&gt; will cover the query mode.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[MySQLSlap (part 2)]]></title><description><![CDATA[A guide to benchmarking with mysqlslap.]]></description><link>https://tomfern.com/posts/mysqlslap-guide-2</link><guid isPermaLink="false">https://tomfern.com/posts/mysqlslap-guide-2</guid><pubDate>Tue, 08 Jan 2019 03:20:00 GMT</pubDate><content:encoded>&lt;p&gt;This is the second part of my mysqlslap guide, you can read the &lt;a href=&quot;./mysqlslap-guide-1&quot;&gt;first part&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysqlslap uses the same connection parameters as the normal mysql client, so &lt;code class=&quot;language-text&quot;&gt;--host&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--port&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--socket&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--username&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;--password&lt;/code&gt; work.
In the examples below the parameters &lt;em&gt;will be omitted&lt;/em&gt; for brevity‚Äôs sake.&lt;/p&gt;
&lt;h2 id=&quot;the-query-mode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-query-mode&quot; aria-label=&quot;the query mode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Query Mode&lt;/h2&gt;
&lt;p&gt;Query mode allow us to benchmark ad-hoc queries. It‚Äôs a quick way to troubleshoot a troublesome query.&lt;/p&gt;
&lt;p&gt;In its simplest form we pass the query:&lt;/p&gt;
&lt;p&gt;(Remember that the connection parameters are &lt;em&gt;omitted&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --query=&amp;quot;call superheroes.secret_identity(&amp;#39;batman&amp;#39;);&amp;quot;
  Benchmark
          Average number of seconds to run all queries: 0.000 seconds
          Minimum number of seconds to run all queries: 0.000 seconds
          Maximum number of seconds to run all queries: 0.000 seconds
          Number of clients running queries: 1
          Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also write our SQL in a file. mysqlslap is quirky when parsing files, it expects each statement into its own line, we can regain the normal behaviour using &lt;code class=&quot;language-text&quot;&gt;--delimiter&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;mysqlslap --query=&amp;#39;my_query.sql&amp;#39; --delimiter=&amp;#39;;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to repeat the query 10 times we use &lt;code class=&quot;language-text&quot;&gt;--iterations&lt;/code&gt;. mysqlslap opens 1 connection and runs the query 10 times, sequentially.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --iterations=10 --query=&amp;quot;SELECT sleep(0.1);&amp;quot;
Benchmark
        Average number of seconds to run all queries: 0.102 seconds
        Minimum number of seconds to run all queries: 0.101 seconds
        Maximum number of seconds to run all queries: 0.104 seconds
        Number of clients running queries: 1
        Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The average time for each query was 0.101. The total execution time unfortunately is not shown by the tool but was a little longer than 1 second.&lt;/p&gt;
&lt;p&gt;We can also use &lt;code class=&quot;language-text&quot;&gt;--concurrency&lt;/code&gt; to simulate many clients running at the same time. For example to simulate 20 clients, each one running time the query one time:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --concurrency=20 --query=&amp;quot;SELECT sleep(0.1);&amp;quot;
Benchmark
        Average number of seconds to run all queries: 0.107 seconds
        Minimum number of seconds to run all queries: 0.107 seconds
        Maximum number of seconds to run all queries: 0.107 seconds
        Number of clients running queries: 20
        Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time the command returned after a little longer than 100 ms, because the sleep was concurrent.
It returned after the last client finished sleeping.&lt;/p&gt;
&lt;p&gt;And we can combine concurrency and iterations, this will run the query a total of 200 times:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; mysqlslap --concurrency=20 --iterations=10 --query=&amp;quot;SELECT sleep(0.1);&amp;quot;
Benchmark
        Average number of seconds to run all queries: 0.111 seconds
        Minimum number of seconds to run all queries: 0.104 seconds
        Maximum number of seconds to run all queries: 0.121 seconds
        Number of clients running queries: 20
        Average number of queries per client: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Total run time a little longer than 1 second.&lt;/p&gt;
&lt;p&gt;What about if we want to create the test data? mysqlslap provides the &lt;code class=&quot;language-text&quot;&gt;--create-schema&lt;/code&gt; and the &lt;code class=&quot;language-text&quot;&gt;--create&lt;/code&gt; parameters.
We can supply the create DDL directly as strings or inside a text file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# database dropped when done
mysqlslap --query=&amp;quot;select * from heroes;&amp;quot; --create-schema=&amp;#39;superheroes&amp;#39; --create=&amp;#39;schema.sql&amp;#39; --delimiter=&amp;quot;;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A word of warning&lt;/strong&gt;, the schema will be dropped afterwards (unless using &lt;code class=&quot;language-text&quot;&gt;--no-drop&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB‚Äôs mysqlslap: &lt;a href=&quot;https://mariadb.com/kb/en/library/mysqlslap/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://mariadb.com/kb/en/library/mysqlslap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySQL‚Äôs mysqlslap: &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqlslap.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/mysqlslap.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pretty neat, right?&lt;/p&gt;
&lt;p&gt;If you haven‚Äôt already, check the &lt;a href=&quot;./mysqlslap-guide-1&quot;&gt;first part&lt;/a&gt; of the guide to mysqlslap.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[System Monitoring with Sar]]></title><description><![CDATA[A guide to system monitoring with sar]]></description><link>https://tomfern.com/posts/sar-guide</link><guid isPermaLink="false">https://tomfern.com/posts/sar-guide</guid><pubDate>Mon, 07 Jan 2019 04:40:00 GMT</pubDate><content:encoded>&lt;p&gt;sar is part of the &lt;a href=&quot;http://pagesperso-orange.fr/sebastien.godard&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;sysstat&lt;/a&gt; project, a suite of programs for system monitoring.
With sar, we can log system activity, build performance reports and even make plots.&lt;/p&gt;
&lt;p&gt;sar is available on Linux, Solaris, AIX and HP-UX.&lt;/p&gt;
&lt;p&gt;We can choose to run sar automatically, as an unattended script. Or interactively and get system metrics on the spot.&lt;/p&gt;
&lt;h2 id=&quot;unattended-mode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#unattended-mode&quot; aria-label=&quot;unattended mode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unattended Mode&lt;/h2&gt;
&lt;p&gt;With a simple cron entry we can log system activity. If possible, as root, otherwise some data may be missing.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# cron entries, take a sample every 10 minutes
@reboot /usr/lib/sa/sa1 --boot
*/10 * * * * /usr/lib/sa/sa1 1 1 -S DISK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;@reboot&lt;/code&gt; line is kind of optional, but if the cron supports it‚Äôs good to have since it ensures the counters are reset
on boot.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sa1&lt;/code&gt; is script that calls &lt;code class=&quot;language-text&quot;&gt;sadc&lt;/code&gt;, which does the actual collection.
To prevent the files from growing too large not everything is stored, however
additional counters can be enabled with &lt;code class=&quot;language-text&quot;&gt;-S&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Optional collection options for sadc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DISK block devices&lt;/li&gt;
&lt;li&gt;XDISK block devices and partitions&lt;/li&gt;
&lt;li&gt;INT system interrupts&lt;/li&gt;
&lt;li&gt;IPV6 network IPV6 statistics&lt;/li&gt;
&lt;li&gt;POWER power management&lt;/li&gt;
&lt;li&gt;SNMP is for the SNMP statistics&lt;/li&gt;
&lt;li&gt;ALL everything except XDISK&lt;/li&gt;
&lt;li&gt;XALL everthing including XDISK&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Also check sysstat‚Äôs config for compression and retention options. /etc/conf.d/sysstat or /etc/default/sysstat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To access the stored data we have two alternatives:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sa2&lt;/code&gt; is a script that generates an activity report for the previous day (/var/log/sarNN). This can be croned easily:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# generate daily activity report
00 18 * * * /usr/lib/sa/sa2 -A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The other way is calling &lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt; directly, this lets us choose the view:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# sar views with extended options
-u [ALL]  CPU utilization (default view)
-b        I/O rates
-d        block device activity
-F        mounted filesystem statistics
-n ALL    network statistics
-P ALL    per processor statistics
-q        queue and load average
-r [ALL]  memory utilization
-H        hugepages utilization
-S        swap space utilization
-B        paging statistics
-W        swapping activity
-v        inode and kernel tables
-w        task/process creation
-y        TTY device activity
-m ALL    power management statistics
-I ALL    interrupts
-A        Everything&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some views have additional options, for example &lt;code class=&quot;language-text&quot;&gt;-n ALL&lt;/code&gt; shows all network activity (including protocols) while &lt;code class=&quot;language-text&quot;&gt;-n DEV&lt;/code&gt;
only shows network devices.&lt;/p&gt;
&lt;p&gt;sar by default shows today‚Äôs logs, &lt;code class=&quot;language-text&quot;&gt;-1&lt;/code&gt; brings yesterday‚Äôs, &lt;code class=&quot;language-text&quot;&gt;-2&lt;/code&gt; the day before yesterday and so on.
We can specify the day‚Äôs starting &lt;code class=&quot;language-text&quot;&gt;-s&lt;/code&gt; and end times &lt;code class=&quot;language-text&quot;&gt;-e&lt;/code&gt; in HH:MM:SS format&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# yesterday&amp;#39;s cpu report, with start and end time
sar -1 -s 2:58:05 -e 2:58:55
Linux 4.19.8-arch1-1-ARCH (ix) 	12/26/2018 	_x86_64_	(4 CPU)

02:58:05 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
02:58:10 PM     all     10.89      0.00      7.82      0.00      0.00     81.29
02:58:15 PM     all      9.82      0.00      7.35      0.00      0.00     82.83
02:58:20 PM     all     11.28      0.00      6.33      0.05      0.00     82.34
02:58:25 PM     all     10.69      0.00      7.06      0.05      0.00     82.21
02:58:30 PM     all     10.27      0.00      7.02      0.00      0.00     82.71
02:58:35 PM     all     11.49      0.00      8.22      0.00      0.00     80.30
02:58:40 PM     all     11.90      0.00      6.66      0.05      0.00     81.39
02:58:45 PM     all     14.38      0.00      7.14      0.05      0.00     78.43
02:58:50 PM     all     10.66      0.00      6.63      0.00      0.00     82.71
02:58:55 PM     all     15.01      0.00      6.63      0.00      0.00     78.35
Average:        all     11.63      0.00      7.09      0.02      0.00     81.26&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;interactive-sar&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#interactive-sar&quot; aria-label=&quot;interactive sar permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interactive Sar&lt;/h2&gt;
&lt;p&gt;A quicker alternative is running sar interactively. We can log system activity while doing some other tasks.
Perhaps while running a benchmark or doing some troubleshooting.&lt;/p&gt;
&lt;p&gt;With the &lt;code class=&quot;language-text&quot;&gt;-o&lt;/code&gt; option, sar stores/appends data in a file or directory.&lt;/p&gt;
&lt;p&gt;sar takes a sample &lt;em&gt;interval&lt;/em&gt; (in seconds) and &lt;em&gt;count&lt;/em&gt; that works as a stop condition.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# collect activity in my_metrics file, 1 sample per second, 60 samples total
sar -o my_metrics 1 60
Linux 4.19.8-arch1-1-ARCH (ix) 	12/24/2018 	_x86_64_	(4 CPU)

07:01:06 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
07:01:07 PM     all     11.08      0.00      4.79      0.00      0.00     84.13
07:01:08 PM     all     13.71      0.00      7.11      0.25      0.00     78.93
07:01:09 PM     all     13.62      0.00      6.43      0.00      0.00     79.95
07:01:10 PM     all     13.99      0.00      6.36      0.00      0.00     79.64
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you‚Äôve used &lt;a href=&quot;./vmstat-guide&quot;&gt;mpstat&lt;/a&gt; before, you‚Äôll recognize the format, it‚Äôs exactly the same.&lt;/p&gt;
&lt;p&gt;To retrieve the results we use &lt;code class=&quot;language-text&quot;&gt;-f&lt;/code&gt;.
We can use a different &lt;em&gt;interval&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; and the output will be filtered appropiately.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# print report from my_metrics file
sar -f my_metrics -s 14:00:00 1 5
Linux 4.19.8-arch1-1-ARCH (ix) 	12/24/2018 	_x86_64_	(4 CPU)

14:00:00 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
14:00:01 PM     all      9.47      0.00      6.01      0.00      0.00     84.52
14:00:02 PM     all     11.11      0.00      5.05      0.00      0.00     83.84
14:00:03 PM     all     29.62      0.00      9.87      0.00      0.00     60.51
14:00:04 PM     all     12.85      0.00      3.27      0.00      0.00     83.88
14:00:05 PM     all     20.00      0.00      8.86      0.00      0.00     71.14
Average:        all     16.09      0.00      6.57      0.00      0.00     77.35&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# print memory activity from my_metrics file
sar -r -f my_metrics
Linux 4.19.8-arch1-1-ARCH (ix) 	12/24/2018 	_x86_64_	(4 CPU)

07:45:47 PM kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
07:45:48 PM    755544   5216144   5525576     47.27    876804   3773928  14648100     83.48   7714540   2267792      4404
07:45:49 PM    753728   5214328   5527772     47.29    876804   3773548  14648100     83.48   7716816   2267400      4420
07:45:50 PM    734512   5195136   5546088     47.45    876804   3774448  14651412     83.49   7734560   2268308      4432
07:45:51 PM    717524   5178164   5562876     47.59    876804   3774648  14670976     83.61   7750836   2268504      4448
07:45:52 PM    711580   5172232   5568900     47.65    876804   3774568  14670976     83.61   7757748   2268428      4460
Average:       734578   5195201   5546242     47.45    876804   3774228  14657913     83.53   7734900   2268086      4433&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;exporting-sars-data&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#exporting-sars-data&quot; aria-label=&quot;exporting sars data permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exporting Sar‚Äôs Data&lt;/h2&gt;
&lt;p&gt;Wouldn‚Äôt it be great to be able to export the collected data? Maybe to a database or a spreasheet?
Don‚Äôt we deserve some nice plots? No worries, &lt;code class=&quot;language-text&quot;&gt;sadf&lt;/code&gt; has us covered.&lt;/p&gt;
&lt;p&gt;sadf syntax is a bit quirkier:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sadf [options] [ &amp;lt;interval&amp;gt; [ &amp;lt;count&amp;gt; ] ] [ &amp;lt;datafile&amp;gt; | -[0-9]+ ] -- [sar options]

  options:
    -p table
    -d CSV
    -r raw CSV (as read from the kernel)
    -x XML
    -d JSON
    -g SVG&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The options to the right of the &lt;code class=&quot;language-text&quot;&gt;--&lt;/code&gt; are sent to sar for printing the report, here we can choose what views to export.&lt;/p&gt;
&lt;p&gt;To select the log file we can use either &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;-1&lt;/code&gt;, etc for daily logs (as in the unattended mode) or just
provide the path to the datafile.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# export yesterday&amp;#39;s I/O activity in CSV
sadf -d -1  -- -b
# hostname;interval;timestamp;tps;rtps;wtps;bread/s;bwrtn/s
ix;1;2018-12-26 17:58:06 UTC;20.00;0.00;20.00;0.00;168.00
ix;1;2018-12-26 17:58:07 UTC;0.00;0.00;0.00;0.00;0.00
ix;1;2018-12-26 17:58:08 UTC;0.00;0.00;0.00;0.00;0.00
ix;1;2018-12-26 17:58:09 UTC;71.00;0.00;71.00;0.00;624.00
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# export CPU activity from my_metrics file in JSON
sadf -j my_metrics -- -u
{&amp;quot;sysstat&amp;quot;: {
        &amp;quot;hosts&amp;quot;: [
                {
                        &amp;quot;nodename&amp;quot;: &amp;quot;ix&amp;quot;,
                        &amp;quot;sysname&amp;quot;: &amp;quot;Linux&amp;quot;,
                        &amp;quot;release&amp;quot;: &amp;quot;4.19.8-arch1-1-ARCH&amp;quot;,
                        &amp;quot;machine&amp;quot;: &amp;quot;x86_64&amp;quot;,
                        &amp;quot;number-of-cpus&amp;quot;: 4,
                        &amp;quot;file-date&amp;quot;: &amp;quot;2018-12-26&amp;quot;,
                        &amp;quot;file-utc-time&amp;quot;: &amp;quot;17:58:05&amp;quot;,
                        &amp;quot;statistics&amp;quot;: [
                                {
                                        &amp;quot;timestamp&amp;quot;: {&amp;quot;date&amp;quot;: &amp;quot;2018-12-26&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;17:58:06&amp;quot;, &amp;quot;utc&amp;quot;: 1, &amp;quot;interval&amp;quot;: 1},
                                        &amp;quot;cpu-load&amp;quot;: [
                                                {&amp;quot;cpu&amp;quot;: &amp;quot;all&amp;quot;, &amp;quot;user&amp;quot;: 16.11, &amp;quot;nice&amp;quot;: 0.00, &amp;quot;system&amp;quot;: 10.58, &amp;quot;iowait&amp;quot;: 0.00, &amp;quot;steal&amp;quot;: 0.00, &amp;quot;idle&amp;quot;: 73.32}
                                        ]
                                },
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code class=&quot;language-text&quot;&gt;-g&lt;/code&gt; we get SVG output that we can redirect into a file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# export CPU activity as SVG plot
sadf -g -- -u &amp;gt; cpu.svg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/img/sadf-cpu-example.png&quot; alt=&quot;CPU Utilization&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# export network activity for device eth0 as SVG plot
sadf -g  -- -n DEV --iface=eth0 &amp;gt; a.svg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/img/sadf-network-example.png&quot; alt=&quot;Network Usage&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sysstat website: &lt;a href=&quot;http://pagesperso-orange.fr/sebastien.godard&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://pagesperso-orange.fr/sebastien.godard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sysstat github: &lt;a href=&quot;https://github.com/sysstat/sysstat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/sysstat/sysstat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;manpages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sar: &lt;a href=&quot;https://linux.die.net/man/1/sar&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/1/sar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sa1: &lt;a href=&quot;https://linux.die.net/man/8/sa1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/8/sa1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sa2: &lt;a href=&quot;https://linux.die.net/man/8/sa2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/8/sa2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sadc: &lt;a href=&quot;https://linux.die.net/man/8/sadc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/8/sadc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sadf: &lt;a href=&quot;https://linux.die.net/man/1/sadf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/1/sadf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wrapping-up&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#wrapping-up&quot; aria-label=&quot;wrapping up permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;For sure, there are a lot of more options available, I just can‚Äôt cover them all, but I think the basics were covered.&lt;/p&gt;
&lt;p&gt;That‚Äôs all for now. If interested on system monitoring, sure to check my previous article about &lt;a href=&quot;./vmstat-guide&quot;&gt;vmstat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have a good one.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A guide to vmstat and friends]]></title><description><![CDATA[A getting started guide for vmstat, iostat, mpstat and pidstat.]]></description><link>https://tomfern.com/posts/vmstat-guide</link><guid isPermaLink="false">https://tomfern.com/posts/vmstat-guide</guid><pubDate>Mon, 07 Jan 2019 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;A getting started guide for vmstat, iostat, mpstat and pidstat.&lt;/p&gt;
&lt;h2 id=&quot;vmstat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vmstat&quot; aria-label=&quot;vmstat permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vmstat&lt;/h2&gt;
&lt;p&gt;Once I figured out how vmstat works, I found that I almost could no longer live without it, it‚Äôs that good.
Fortunately it‚Äôs available everywhere, so I don‚Äôt. There are many versions around, both for
Linux and Unix.&lt;/p&gt;
&lt;p&gt;vmstat does a little bit of everything: memory, processes, I/O, swap, disks, CPU.&lt;/p&gt;
&lt;p&gt;The basic syntax is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vmstat [options] &amp;lt;interval&amp;gt; &amp;lt;count&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vmstat prints a new update every &lt;em&gt;interval&lt;/em&gt; seconds, stopping after &lt;em&gt;count&lt;/em&gt; lines.
If no count is supplied, vmstat continues until killed. If there isn‚Äôt any &lt;em&gt;interval&lt;/em&gt;, only 1 line is printed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# 1 update per second, 5 updates
-&amp;gt; vmstat 1 5
procs   -----------memory----------   --swap-    ---io--- -system-- ------cpu-----
 r  b   swpd    free   buff  cache    si   so    bi    bo   in   cs us sy id wa st
 4  0      0 4098084 375068 3462944    0    0    34    25  340  320  8  3 89  0  0
 1  0      0 4098184 375068 3463264    0    0     0     0 1263 3198  4  3 93  0  0
 0  0      0 4098436 375068 3462924    0    0     0     0 1141 2999  3  2 95  0  0
 0  0      0 4097736 375076 3462916    0    0     0     0 2166 4414  5  4 92  0  0
 0  0      0 4096476 375076 3462916    0    0     0     0 1103 3130  3  3 94  0  0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The values in the very first line are averages since boot, thus it usually stands out as different than the rest.&lt;/p&gt;
&lt;p&gt;All values, with the exception of memory and processes, are average &lt;em&gt;rates&lt;/em&gt; from the previous update.
Memory and processes (the first 6 columns) are always instantaneous values.
Memory is shown in KBs but &lt;code class=&quot;language-text&quot;&gt;-S&lt;/code&gt; changes units, e.g. &lt;code class=&quot;language-text&quot;&gt;-S M&lt;/code&gt; for MBs.&lt;/p&gt;
&lt;p&gt;If your version of vmstat supports &lt;code class=&quot;language-text&quot;&gt;-w&lt;/code&gt;, use it,  makes the table wider and easier to read.&lt;/p&gt;
&lt;p&gt;So what does each column mean?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;column&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;th&gt;unit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;number of processes running&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;number of processes sleeping&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spwd&lt;/td&gt;
&lt;td&gt;swap memory used&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;amount of idle memory&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buff&lt;/td&gt;
&lt;td&gt;memory used for buffers&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cache&lt;/td&gt;
&lt;td&gt;memory used for cache&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;si&lt;/td&gt;
&lt;td&gt;swaps per second from disk to memory&lt;/td&gt;
&lt;td&gt;1/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;so&lt;/td&gt;
&lt;td&gt;swaps per second from memory to disk&lt;/td&gt;
&lt;td&gt;1/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bi&lt;/td&gt;
&lt;td&gt;blocks per second received from block device&lt;/td&gt;
&lt;td&gt;blocks/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bo&lt;/td&gt;
&lt;td&gt;blocks per second sent to block device&lt;/td&gt;
&lt;td&gt;blocks/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;interrupts per second&lt;/td&gt;
&lt;td&gt;1/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cs&lt;/td&gt;
&lt;td&gt;context switches per second&lt;/td&gt;
&lt;td&gt;1/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us&lt;/td&gt;
&lt;td&gt;CPU user time&lt;/td&gt;
&lt;td&gt;% of total&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sy&lt;/td&gt;
&lt;td&gt;CPU system time&lt;/td&gt;
&lt;td&gt;% of total&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;CPU idle time&lt;/td&gt;
&lt;td&gt;% of total&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;st&lt;/td&gt;
&lt;td&gt;CPU time stolen from Virtual Machine&lt;/td&gt;
&lt;td&gt;% of total&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A few guidelines to read the values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check first &lt;em&gt;si&lt;/em&gt; and &lt;em&gt;so&lt;/em&gt; for swapping activity, this is &lt;em&gt;the&lt;/em&gt; performance killer&lt;/li&gt;
&lt;li&gt;check that memory allocation makes sense for the workload&lt;/li&gt;
&lt;li&gt;consistent high &lt;em&gt;us&lt;/em&gt; indicate possible CPU bound load&lt;/li&gt;
&lt;li&gt;consistent high &lt;em&gt;wa&lt;/em&gt; indicate possible I/O bound load&lt;/li&gt;
&lt;li&gt;if this is a VM and &lt;em&gt;st&lt;/em&gt; (steal) is consistently high for long, the host system could be overloaded or the VM under-provisioned&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-d&lt;/code&gt; gets us per-device I/O counters since boot. With &lt;code class=&quot;language-text&quot;&gt;-p &amp;lt;PART&amp;gt;&lt;/code&gt; we get the same for an specific parition.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-&amp;gt; vmstat -d 1
disk- ------------reads------------ ------------writes----------- -----IO------
       total merged sectors      ms  total merged sectors      ms    cur    sec
sda   154968   4762 5471678   52614 123981  67290 4139296   68873      0     45
sda   154968   4762 5471678   52614 123985  67305 4139440   68876      0     45
sda   187412   5295 5735630   57902 126252  67704 5888256   80177      0     51
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Columns are read like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;column&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;total number of reads / writes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;merged&lt;/td&gt;
&lt;td&gt;merged requests (N requests into one I/O)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sectors&lt;/td&gt;
&lt;td&gt;number of sectors read / written&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ms&lt;/td&gt;
&lt;td&gt;milliseconds spent reading / writing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cur&lt;/td&gt;
&lt;td&gt;number of I/O operations running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;seconds spent for I/O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can also access a detailed cache utilization report with &lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt;, but it may require root permissions to work.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;&amp;gt; vmstat -m
Cache                            Num  Total   Size  Pages
ecryptfs_inode_cache            1544   1564    960     17
ecryptfs_file_cache              256   1024     16    256
ecryptfs_auth_tok_list_item       19     76    832     19
nf_conntrack_expect                0      0    216     18
nf_conntrack                     101    200    320     25
fuse_request                      80     80    400     20
fuse_inode                        42     76    832     19
ext4_groupinfo_4k               1716   1736    144     28
ext4_inode_cache              325004 327150   1080     30
ext4_allocation_context          128    128    128     32
ext4_io_end                      256    320     64     64
ext4_extent_status            156920 156978     40    102
mbcache                          294    438     56     73
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the columns are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;column&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cache&lt;/td&gt;
&lt;td&gt;the cache name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;num&lt;/td&gt;
&lt;td&gt;active object count&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;total object count&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;size per object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages&lt;/td&gt;
&lt;td&gt;pages with one or more active object&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;vmstat also has these one-shot views:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-s&lt;/code&gt; system statistics&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-D&lt;/code&gt; all disks summary&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-f&lt;/code&gt; forks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;iostat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#iostat&quot; aria-label=&quot;iostat permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iostat&lt;/h2&gt;
&lt;p&gt;iostat shows the combined CPU and disk I/O statistics. As with vmstat, it can work with &lt;em&gt;interval&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# one update per second
-&amp;gt; iostat 1
Linux 4.19.8-arch1-1-ARCH (ix) 	12/24/2018 	_x86_64_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          12.14    0.03    5.66    0.03    0.00   82.14

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               4.41        29.11        49.44    3409859    5790640

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           5.56    0.00    3.79    0.00    0.00   90.66

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               0.00         0.00         0.00          0          0
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, the first report shows averages since boot (we can omit it with &lt;code class=&quot;language-text&quot;&gt;-y&lt;/code&gt;). While the following shows rates since the previous interval.&lt;/p&gt;
&lt;p&gt;We can choose to only see cpu with &lt;code class=&quot;language-text&quot;&gt;-c&lt;/code&gt; or disk with &lt;code class=&quot;language-text&quot;&gt;-d&lt;/code&gt;. Also &lt;code class=&quot;language-text&quot;&gt;-x&lt;/code&gt; shows extended I/O statistics and &lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt; changes units to MB.
&lt;code class=&quot;language-text&quot;&gt;-h&lt;/code&gt; changes into an easier to read (for humans) format.&lt;/p&gt;
&lt;h2 id=&quot;mpstat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mpstat&quot; aria-label=&quot;mpstat permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mpstat&lt;/h2&gt;
&lt;p&gt;mpstat shows (more) detailed CPU statistics. We get vmstat‚Äôs counters plus some. Same deal with the
&lt;em&gt;interval&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# 1 update per second
-&amp;gt; mpstat 1
Linux 4.19.8-arch1-1-ARCH (ix) 	12/24/2018 	_x86_64_	(4 CPU)

06:48:41 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
06:48:42 PM  all    7.85    0.00    3.04    0.00    0.25    0.51    0.00    0.00    0.00   88.35
06:48:43 PM  all   10.08    0.00    4.79    0.00    1.01    0.00    0.00    0.00    0.00   84.13
06:48:44 PM  all    7.25    0.00    5.25    0.00    0.75    0.50    0.00    0.00    0.00   86.25
06:48:45 PM  all    9.07    0.00    3.78    0.25    1.01    0.50    0.00    0.00    0.00   85.39&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First line is, yet again, averages since boot.&lt;/p&gt;
&lt;p&gt;We can choose to only show activity for some CPUs with &lt;code class=&quot;language-text&quot;&gt;-P&lt;/code&gt;, e.g. &lt;code class=&quot;language-text&quot;&gt;-P 1,3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are additional views: &lt;code class=&quot;language-text&quot;&gt;-I ALL&lt;/code&gt; shows all CPU interruptions, &lt;code class=&quot;language-text&quot;&gt;-n&lt;/code&gt; shows CPU statistics based on NUMA placement nodes
(use &lt;code class=&quot;language-text&quot;&gt;-N&lt;/code&gt; to indicate which nodes to report). There is even a JSON output with &lt;code class=&quot;language-text&quot;&gt;-o JSON&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mpstat shows general CPU utilization, to track an individual process there is &lt;em&gt;pidstat&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;pidstat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pidstat&quot; aria-label=&quot;pidstat permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;pidstat&lt;/h2&gt;
&lt;p&gt;This one has some similarities with &lt;em&gt;top&lt;/em&gt;. Every &lt;em&gt;interval&lt;/em&gt; pidstat prints what processes were running.
We can also track particular processes with &lt;code class=&quot;language-text&quot;&gt;-p&lt;/code&gt;. Threads are shown with &lt;code class=&quot;language-text&quot;&gt;-t&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# track process CPU activity, thread view
-&amp;gt; pidstat -t -p 25809 1
Linux 4.19.8-arch1-1-ARCH (ix) 	12/29/2018 	_x86_64_	(4 CPU)

11:00:58 PM   UID      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command
11:00:58 PM   980     25809         -    0.22    0.07    0.00    0.00    0.28     1  mysqld
11:00:58 PM   980         -     25809    0.00    0.00    0.00    0.00    0.00     1  |__mysqld
11:00:58 PM   980         -     25811    0.00    0.00    0.00    0.00    0.00     0  |__mysqld
11:00:58 PM   980         -     25812    0.00    0.00    0.00    0.00    0.00     3  |__mysqld
11:00:58 PM   980         -     25820    0.00    0.00    0.00    0.00    0.00     1  |__mysqld
11:00:58 PM   980         -     25834    0.02    0.01    0.00    0.01    0.02     3  |__mysqld
11:00:58 PM   980         -     25835    0.02    0.00    0.00    0.01    0.02     3  |__mysqld
11:00:58 PM   980         -     25836    0.01    0.00    0.00    0.01    0.02     2  |__mysqld
11:00:58 PM   980         -     25837    0.01    0.00    0.00    0.01    0.01     0  |__mysqld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-r&lt;/code&gt; shows memory per process, which gives a quick way to check for memory leaks&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# track process memory activity
-&amp;gt; pidstat -r -p 27766 1
Linux 4.19.8-arch1-1-ARCH (ix) 	12/30/2018 	_x86_64_	(4 CPU)

09:42:59 PM   UID       PID  minflt/s  majflt/s     VSZ     RSS   %MEM  Command
09:43:00 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld
09:43:01 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld
09:43:02 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld
09:43:03 PM  1000     27766      0.00      0.00  689680   17128   0.15  mysqld
Average:     1000     27766      0.00      0.00  689680   17128   0.15  mysqld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pidstat can start a program with &lt;code class=&quot;language-text&quot;&gt;-e&lt;/code&gt; and show its activity during the execution.&lt;/p&gt;
&lt;p&gt;Besides CPU, pidstat can also show per-process I/O activity&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;# per-process I/O
-&amp;gt; pidstat -d 1 5
Linux 4.20.0-arch1-1-ARCH (ix) 	01/06/2019 	_x86_64_	(4 CPU)

04:04:53 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command
04:04:54 PM  1000     14423    276.00 197888.00      0.00       1  dd
04:04:55 PM  1000     14423      0.00 218880.00      0.00       0  dd
04:04:56 PM  1000     14423      0.00 224664.00      0.00       0  dd
04:04:57 PM  1000     14423      0.00 230428.00      0.00       0  dd
04:04:59 PM  1000     14423      0.00 192520.00      0.00       0  dd
Average:     1000     14423     46.00 207763.33      0.00       0  dd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If pidstat prints negative values, it means it doesn‚Äôt have enough permissions to access the process.
Try switching to the user running the process (or as root, that should always).&lt;/p&gt;
&lt;p&gt;pidstat supports all these views:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-d&lt;/code&gt;  I/O statistics&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-u&lt;/code&gt;  CPU statistics&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-R&lt;/code&gt;  process priority&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-r&lt;/code&gt;  memory utilization&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-s&lt;/code&gt;  stack utilization&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-t&lt;/code&gt;  thread statistics&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-w&lt;/code&gt;  task switching&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-v&lt;/code&gt;  file descriptor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;putting-it-all-together&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#putting-it-all-together&quot; aria-label=&quot;putting it all together permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;These programs complement each other. How would all work together?
Let‚Äôs say we want to find why my machine is running slow.&lt;/p&gt;
&lt;p&gt;The first thing we can check is vmstat:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;-&amp;gt; vmstat 1
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0 12 773184 3782540 161528 3176304    0    0  1184 38944 2888 9877 20  5  1 74  0
 2  9 773184 3745748 161528 3213272    0    0  2660 36868 2876 7426 18  7  1 73  0
 0 11 773184 3630836 161540 3326616    0    0  2688 43052 2959 7064 23  5  1 70  0
 2 11 771648 2297092 161792 4873416    0    0  2672 40960 3034 7547 23  6  2 69  0
 1 11 771648 2255008 161796 4915000    0    0  2088 38912 2939 7370 24  6  2 67  0
 0 11 771648 2142616 161796 4992940    0    0  2148 38916 2976 8061 31  6  1 63  0
 1 10 771648 2100532 161804 5034252   20    0  1608 41012 3919 9665 34 11  1 54  0
 0 11 819776 149836 157540 6949188    0    0  1920 12292 2702 5527  6  4  0 90  0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What can you see? A consistent high number of sleeping (b), memory utilization going up, no swapping‚Ä¶ that‚Äôs good,
disks are being written.&lt;/p&gt;
&lt;p&gt;Hmm, a consistently high CPU wait (wa).
There are indications of an I/O bottleneck, the CPUs are waiting for disks requests.&lt;/p&gt;
&lt;p&gt;What does mpstat say?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;mpstat 1
Linux 4.20.0-arch1-1-ARCH (ix) 	01/06/2019 	_x86_64_	(4 CPU)

01:34:49 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:34:50 PM  all   24.54    0.00    4.22   68.87    1.06    1.06    0.00    0.00    0.00    0.26
01:34:51 PM  all   19.05    0.00    3.44   74.87    1.06    0.53    0.00    0.00    0.00    1.06
01:34:52 PM  all   19.37    0.00    3.14   74.61    0.79    1.05    0.00    0.00    0.00    1.05
01:34:54 PM  all   22.08    0.00    3.12   62.86    0.52    1.04    0.00    0.00    0.00   10.39&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again there it is, a high iowait. There is something funny going on with the disks.&lt;/p&gt;
&lt;p&gt;Let‚Äôs try iostat:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;iostat -x 1 -y
Linux 4.20.0-arch1-1-ARCH (ix) 	01/06/2019 	_x86_64_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.00    0.00    0.00    0.00    0.00    0.00

Device            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util
sda             54.00    0.00   2532.00      0.00     0.00     0.00   0.00   0.00    0.57    0.00   0.02    46.89     0.00   0.06   0.30
dm-0            54.00    0.00   2532.00      0.00     0.00     0.00   0.00   0.00    0.50    0.00   0.03    46.89     0.00   0.24   1.30
sdd              1.00  347.00      4.00  39512.00     0.00     0.00   0.00   0.00   53.00    5.42   0.99     4.00   113.87   2.86  99.40

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          23.90    0.00    6.49   68.31    0.00    1.30

Device            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util
sda             69.00    0.00   2636.00      0.00     2.00     0.00   2.82   0.00    0.58    0.00   0.06    38.20     0.00   0.29   2.00
dm-0            71.00    0.00   2636.00      0.00     0.00     0.00   0.00   0.00    1.03    0.00   0.07    37.13     0.00   0.32   2.30
sdd              0.00  340.00      0.00  38672.00     0.00     0.00   0.00   0.00    0.00    5.84   0.99     0.00   113.74   2.92  99.30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quite a lot of writes on the &lt;em&gt;sdd&lt;/em&gt; device. Even worse, the %util is reaching 100%, the device is saturated
(%util is only meaningful for spinning disks, RAID or SDD have different capacities)&lt;/p&gt;
&lt;p&gt;So the problem seems to be related with sdd.&lt;/p&gt;
&lt;p&gt;Can we check what processes are doing I/O?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;nil&quot;&gt;&lt;pre class=&quot;language-nil&quot;&gt;&lt;code class=&quot;language-nil&quot;&gt;sudo pidstat -d 1
Linux 4.20.0-arch1-1-ARCH (ix) 	01/06/2019 	_x86_64_	(4 CPU)

01:36:25 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command
01:36:26 PM     0      2546      3.81      0.00      0.00     100  kworker/u8:3+flush-8:48
01:36:26 PM     0      2799      0.00     38.10      0.00      48  jbd2/sdd1-8
01:36:26 PM   980      3435   1474.29  36323.81      0.00       0  mysqld

01:36:26 PM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command
01:36:27 PM     0      2546      0.00      0.00      0.00      99  kworker/u8:3+flush-8:48
01:36:27 PM   980      3435   2524.00  35096.00      0.00       0  mysqld&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We find a mysql server, a kernel thread flushing data and jbd2 (filesystem journal).&lt;/p&gt;
&lt;p&gt;Aha! we found what has been causing all that troublesome I/O. To continue investigating we would need to get into the database, but
this post is getting way too long already. If you are curious, the root cause was some bad queries that were creating temporary tables.&lt;/p&gt;
&lt;h2 id=&quot;related-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-links&quot; aria-label=&quot;related links permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;manpages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vmstat: &lt;a href=&quot;https://linux.die.net/man/8/vmstat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/8/vmstat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iostat: &lt;a href=&quot;https://linux.die.net/man/1/iostat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/1/iostat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mpstat: &lt;a href=&quot;https://linux.die.net/man/1/mpstat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/1/mpstat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pidstat: &lt;a href=&quot;https://linux.die.net/man/1/pidstat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://linux.die.net/man/1/pidstat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-label=&quot;whats next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What‚Äôs Next?&lt;/h2&gt;
&lt;p&gt;How about some long term analysis? Something that can work unattended and do reports? Sounds nice?&lt;/p&gt;
&lt;p&gt;Good, I guess &lt;a href=&quot;./sar-guide&quot;&gt;next article&lt;/a&gt; will be about &lt;strong&gt;sar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So long.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Welcome, welcome & welcome]]></title><description><![CDATA[Welcome]]></description><link>https://tomfern.com/posts/welcome</link><guid isPermaLink="false">https://tomfern.com/posts/welcome</guid><pubDate>Mon, 07 Jan 2019 00:08:00 GMT</pubDate><content:encoded>&lt;p&gt;Hey! Did I say welcome already? Glad you‚Äôre here.&lt;/p&gt;
&lt;p&gt;So, about blogging: three things moved me to start doing it.&lt;/p&gt;
&lt;p&gt;Number one, I‚Äôve been turning in essays during my Portuguese classes, every week. Right now I‚Äôm on vacation
and feeling the writing bug.&lt;/p&gt;
&lt;p&gt;Number two, learning. For me, experience and explaining are the best roads to learning.
We all get experience, living and working, everyday. Sometimes we can choose what or where, sometimes not.
But explaining is more deliberate. I found that explaining things to myself, in as simple words as I can manage, is the most powerful way of learning.&lt;/p&gt;
&lt;p&gt;I began writing about things I found interesting, I think it‚Äôll be mostly about data and databases, things I deal in my work.&lt;/p&gt;
&lt;p&gt;As for number three, over the years I‚Äôve benefited so much from other people‚Äôs blogs that I now feel indebted. Hopefully I can give back something here.&lt;/p&gt;
&lt;p&gt;Does the internet need another blog? I don‚Äôt know. But for me, so far, the effort has been worthwhile, and I hope this maybe can help somebody else.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;Tomas&lt;/p&gt;</content:encoded></item></channel></rss>