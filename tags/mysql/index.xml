<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on Chaos is order not yet deciphered</title><link>http://tomfern.com/tags/mysql/</link><description>Recent content in mysql on Chaos is order not yet deciphered</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Jan 2019 17:59:00 -0300</lastBuildDate><atom:link href="http://tomfern.com/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>A Container for My Databases</title><link>http://tomfern.com/posts/a-container-for-my-databases/</link><pubDate>Fri, 18 Jan 2019 17:59:00 -0300</pubDate><guid>http://tomfern.com/posts/a-container-for-my-databases/</guid><description>Who doesn&amp;rsquo;t like containers? Anyone doesn&amp;rsquo;t like to have most of the benefits of virtual machines with much, much less overhead?
They&amp;rsquo;ve been around since forever (anyone still remember chroot?) but only in recent years their popularity boomed, mainly due to cloud computing, I&amp;rsquo;m sure.
I&amp;rsquo;ve been running databases in docker for a while now. I was curious about other alternatives, so I did a bit of benchmarking.
Docker ðŸ”—It&amp;rsquo;s not a coincidence that Docker appeared around the same time container technology began its popularity rise.</description></item><item><title>The Cost of Idle Indexes</title><link>http://tomfern.com/posts/the-cost-of-idle-indexes/</link><pubDate>Wed, 16 Jan 2019 12:36:00 -0300</pubDate><guid>http://tomfern.com/posts/the-cost-of-idle-indexes/</guid><description>The last few days I&amp;rsquo;ve been cleaning up indexes. This entails removing duplicate, unused or redundant indexes.
There were quite a lot of indexes, so it was hard work. I knew why this was important to do: as the table changes, indexes need to be kept updated, less indexes means less updates and less wasted resources.
But I wanted to have a real number to attach to the theory. How much benefit is there really?</description></item><item><title>Unused Index cleanup</title><link>http://tomfern.com/posts/unused-index-cleanup/</link><pubDate>Wed, 09 Jan 2019 16:15:00 -0300</pubDate><guid>http://tomfern.com/posts/unused-index-cleanup/</guid><description>Fixing a query by finding the right index feels great, as if by magic, things are blazing fast again.
But indexes, like everything in life, needs balancing. As things inevitably change, some indexes will be left abandoned and unused. What happens then? Well, the database engine must keep them updated regardless, that&amp;rsquo;s wasted I/O. They also take up space. Pruning indexes is the life of any dba.
Unused Indexes in MySQL ðŸ”—Fortunately in MySQL has are two great tools: the performance_schema, which collects all kind of metrics and the sys schema which offers easier-to-read views.</description></item><item><title>Sysbench for databases</title><link>http://tomfern.com/posts/sysbench-for-databases/</link><pubDate>Wed, 09 Jan 2019 00:13:00 -0300</pubDate><guid>http://tomfern.com/posts/sysbench-for-databases/</guid><description>This is my second part of the sysbench guide, I&amp;rsquo;ll cover here some basic benchmarks for databases. Feel free to check my first part for an introduction.
Connecting to the DB ðŸ”—First things first, we&amp;rsquo;ll need a test database. We&amp;rsquo;ll stick to the default &amp;ldquo;sbtest&amp;rdquo;, so go ahead and create it. I&amp;rsquo;ll wait.
Now sysbench needs the connection parameters. The actual values depend on the target. Sysbench supports MySQL and postgreSQL.</description></item><item><title>MySQLSlap (part 1)</title><link>http://tomfern.com/posts/mysqlslap-part-1/</link><pubDate>Tue, 08 Jan 2019 00:20:00 -0300</pubDate><guid>http://tomfern.com/posts/mysqlslap-part-1/</guid><description>There are loads of ways to benchmark MySQL. mysqlslap was, I believe, one of the first official tools for this. It&amp;rsquo;s bundled with the client tools for MySQL and MariaDB, so you probably already have it installed.
In this post I&amp;rsquo;ll cover the basics and the auto generate sql mode, be sure to read the second part about other ways to use it.
How Does It Work? ðŸ”—mysqlslap uses the same connection parameters as the normal mysql client, so --host --port --socket --username --password all work (but strangely the --defaults-file doesn&amp;rsquo;t).</description></item><item><title>MySQLSlap (part 2)</title><link>http://tomfern.com/posts/mysqlslap-part-2/</link><pubDate>Tue, 08 Jan 2019 00:20:00 -0300</pubDate><guid>http://tomfern.com/posts/mysqlslap-part-2/</guid><description>This is the second part of my mysqlslap guide, you can read the first part
mysqlslap uses the same connection parameters as the normal mysql client, so --host --port --socket --username --password work. In the examples below the parameters will be omitted for brevity&amp;rsquo;s sake.
The Query Mode ðŸ”—Query mode allow us to benchmark ad-hoc queries. It&amp;rsquo;s a quick way to troubleshoot a troublesome query.
In its simplest form we pass the query:</description></item></channel></rss>